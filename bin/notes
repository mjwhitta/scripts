#!/usr/bin/env bash
# A script for quickly taking and storing notes.
# by Miles Whittaker <mj@whitta.dev>
#
# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2020 Miles Whittaker
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

### Helpers begin
check_deps() {
    local missing
    for d in "${deps[@]}"; do
        if [[ -z $(command -v "$d") ]]; then
            # Force absolute path
            if [[ ! -f "/$d" ]]; then
                err "$d was not found"
                missing="true"
            fi
        fi
    done; unset d
    [[ -z $missing ]] || exit 128
}
err() { echo -e "${color:+\e[31m}[!] $*\e[0m"; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*\e[0m"; }
info() { echo -e "${color:+\e[37m}[*] $*\e[0m"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || usage 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*\e[0m"; }
warn() { echo -e "${color:+\e[33m}[-] $*\e[0m"; }
### Helpers end

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS] [pattern]

Quickly read/write notes.

Options:
    -c, --cat     Cat the notes
    -f, --find    Find notes matching pattern (default)
    -h, --help    Display this help message
    -n, --new     New notes using pattern as filename
    --no-color    Disable colorized output
    -o, --open    Open notes matching pattern

EOF
    exit "$1"
}

declare -a args deps
unset help
action="find"
color="true"
# deps+=("todo")
notes="$HOME/notes"

# Check for missing dependencies
check_deps

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-c"|"--cat") action="cat" ;;
        "-f"|"--find") action="find" ;;
        "-h"|"--help") help="true" ;;
        "-n"|"--new") action="new" ;;
        "--no-color") unset color ;;
        "-o"|"--open") action="open" ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Check for valid params
[[ -z $help ]] || usage 0

case "$action" in
    "cat") [[ $# -eq 1 ]] || usage 1 ;;
    "find") [[ $# -le 1 ]] || usage 1 ;;
    "new") [[ $# -eq 1 ]] || usage 1 ;;
    "open") [[ $# -eq 1 ]] || usage 1 ;;
esac
[[ -d "$notes" ]] || errx 2 "Directory $notes not found"

case "$action" in
    "cat")
        find -L "$notes/" -type f -ipath "*$(basename "$*")*" \
            -exec cat {} +
        ;;
    "find")
        if [[ $# -eq 0 ]]; then
            find -L "$notes/" -type f | \
                sed -r -e "s#$notes/##g" -e "s/\.md\$//g"
        else
            find -L "$notes/" -type f -ipath "*$(basename "$*")*" | \
                sed -r -e "s#$notes/##g" -e "s/\.md\$//g"
        fi
        ;;
    "new")
        case "$@" in
            */*) mkdir -p "$notes/$(dirname "$*")" ;;
        esac
        ${EDITOR:-vi} "$notes/$*.md"
        ;;
    "open")
        find -L "$notes/" -type f -ipath "*$(basename "$*")*" \
            -exec "${EDITOR:-vi}" {} +
        ;;
esac
