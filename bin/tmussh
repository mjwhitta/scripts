#!/usr/bin/env bash
# A clusterssh like script for tmux.
# by Miles Whittaker <mj@whitta.dev>
#
# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2020 Miles Whittaker
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

### Helpers begin
check_deps() {
    local missing
    for d in "${deps[@]}"; do
        if [[ -z $(command -v "$d") ]]; then
            # Force absolute path
            if [[ ! -e "/$d" ]]; then
                err "$d was not found"
                missing="true"
            fi
        fi
    done; unset d
    [[ -z $missing ]] || exit 128
}
err() { echo -e "${color:+\e[31m}[!] $*${color:+\e[0m}" >&2; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*${color:+\e[0m}"; }
info() { echo -e "${color:+\e[37m}[*] $*${color:+\e[0m}"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || return 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || return 127; arg="$1" ;;
    esac
    echo "$arg"
    return "$shift"
}
subinfo() { echo -e "${color:+\e[36m}[=] $*${color:+\e[0m}"; }
warn() { echo -e "${color:+\e[33m}[-] $*${color:+\e[0m}"; }
### Helpers end

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS] <host1>... [hostN]

DESCRIPTION
    Open connections to multiple hosts using tmux and ssh. If a
    command is specified, it will run that command on each host.

OPTIONS
    -c, --cmd=CMD        Command to run on each host
    -d, --delay=SECS     Wait for specified time after connecting
                         (default: $delay)
    -h, --help           Display this help message
    -i, --interactive    Do not close connection (default: true if no
                         cmd)
    --no-color           Disable colorized output

EOF
    exit "$1"
}

declare -a args
unset cmd help interactive keep_localhost
color="true"
delay="1"

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift; args+=("$@"); break ;;
        "-c"|"--cmd"*) cmd="$(long_opt "$@")" ;;
        "-d"|"--delay"*) delay="$(long_opt "$@")" ;;
        "-h"|"--help") help="true" ;;
        "-i"|"--interactive") interactive="true" ;;
        "--no-color") unset color ;;
        *) args+=("$1") ;;
    esac
    case "$?" in
        0) ;;
        1) shift ;;
        *) usage "$?" ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Help info
[[ -z $help ]] || usage 0

# Check for missing dependencies
declare -a deps
deps+=("head")
deps+=("ssh")
deps+=("tmux")
deps+=("xxd")
check_deps

# Check for valid params
[[ $# -gt 0 ]] || usage 1
[[ -n $TMUX ]] || errx 2 "You are not in a tmux session"

wname="tmussh_$(head -c 4 /dev/urandom | xxd -p)"
tmux new-window -n "$wname"

agent="$HOME/.ssh/agent"
agent_cmd="[[ ! -f \"$agent\" ]] || . \"$agent\" >/dev/null"
current_pane="$(tmux display -p "#{pane_id}")"
for host in "$@"; do
    case "$host" in
        "localhost") tmux split-window -h ;;
        *) tmux split-window -h "$agent_cmd; ssh $host" ;;
    esac
    tmux select-layout tiled
done

tmux kill-pane -t "$current_pane"
tmux select-layout tiled

tmux select-pane -t 0
tmux set-option -w synchronize-panes on

if [[ -n $cmd ]]; then
    sleep "$delay"
    tmux send-keys "$cmd"
    [[ -n $interactive ]] || tmux send-keys "exit"
fi
