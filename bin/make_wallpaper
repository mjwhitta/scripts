#!/usr/bin/env bash
# A script to make wallpapers from given images (or at least attempt).
# by Miles Whittaker <mjwhitta@gmail.com>
#
# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2017 Miles Whittaker
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

operate_on() {
    [[ -f $1 ]] || return
    bgcolor="$(
        convert $1 -depth 8 +dither -format %c histogram:info: | \
        sort -n | tail -n 1 | \grep -Eo "#[A-Fa-f0-9]{6}"
    )"
    case "$action" in
        "convert")
            name="$(
                basename $1 | sed -r -e "s/\..+//g" \
                -e "s/[^A-Za-z0-9]+/_/g"
            )_$resolution.png"
            if [[ -f $output/$name ]]; then
                echo -e "[-] $output/$name already exists!"
                return
            fi
            if [[ -n $bgcolor ]]; then
                convert $1 -background $bgcolor -gravity center \
                    -resize $resolution -extent $resolution \
                    $output/$name
            fi
            ;;
        "info") echo "$bgcolor" ;;
    esac
}

usage() {
    echo "Usage: ${0/*\//} [OPTIONS] <image1>... [imageN]"
    echo
    echo "Create a wallpaper from an image"
    echo
    echo "Options:"
    echo "    -h, --help"
    echo "        Display this help message"
    echo
    echo "    -i, --info"
    echo "        Display background color that would be used"
    echo
    echo "    -o, --output=DIR"
    echo "        Save to the specified directory (default: $output)"
    echo
    echo "    -p, --parallel"
    echo "        Run using parallel"
    echo
    echo "    -r, --resolution=WxH"
    echo "        Use the specified resolution (default: $resolution)"
    echo
    echo "    -t, --threads=NUM"
    echo "        Use the specied number of thread if running in"
    echo "        parallel (default: $threads)"
    echo
    exit $1
}

declare -a args
unset parallel
action="convert"
resolution="1920x1080"
output="."
threads="32"

while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-h"|"--help") usage 0 ;;
        "-i"|"--info") action="info" ;;
        "-o"|"--output"*)
            case "$1" in
                "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 1 ;;
                *) shift; [[ $# -gt 0 ]] || usage 1; arg="$1" ;;
            esac
            output="$arg"
            ;;
        "-p"|"--parallel") parallel="true" ;;
        "-r"|"--resolution"*)
            case "$1" in
                "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 1 ;;
                *) shift; [[ $# -gt 0 ]] || usage 1; arg="$1" ;;
            esac
            resolution="$arg"
            ;;
        "-t"|"--threads"*)
            case "$1" in
                "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 1 ;;
                *) shift; [[ $# -gt 0 ]] || usage 1; arg="$1" ;;
            esac
            threads="$arg"
            ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ -z ${args[@]} ]] || set -- "${args[@]}"

[[ $# -ge 1 ]] || usage 2

if [[ -z $(command -v convert) ]]; then
    echo "imagemagick is not installed"
    exit 3
fi

if [[ -n $parallel ]]; then
    if [[ -z $(command -v parallel) ]] ||
       [[ -z $(command -v env_parallel.bash) ]]
    then
        echo "Parallel is not installed, using default behavior"
        unset parallel
    fi
fi

mkdir -p $output
if [[ -n $parallel ]]; then
    source $(command -v env_parallel.bash)
    env_parallel --eta -P $threads operate_on {} ::: $@
else
    images=($@)
    let "count = 1"
    let "total = ${#images[@]}"
    for image in "${images[@]}"; do
        echo -en "[$count/$total]                              \r" >&2
        operate_on $image
        let "count += 1"
    done; unset image
fi
