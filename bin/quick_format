#!/usr/bin/env bash
# A script for quickly formatting removable devices (SDCard, USB).
# by Miles Whittaker <mj@whitta.dev>
#
# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2020 Miles Whittaker
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

### Helpers begin
check_deps() {
    local missing
    for d in "${deps[@]}"; do
        if [[ -z $(command -v "$d") ]]; then
            # Force absolute path
            if [[ ! -e "/$d" ]]; then
                err "$d was not found"
                missing="true"
            fi
        fi
    done; unset d
    [[ -z $missing ]] || exit 128
}
err() { echo -e "${color:+\e[31m}[!] $*${color:+\e[0m}" >&2; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*${color:+\e[0m}"; }
info() { echo -e "${color:+\e[37m}[*] $*${color:+\e[0m}"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || return 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || return 127; arg="$1" ;;
    esac
    echo "$arg"
    return "$shift"
}
subinfo() { echo -e "${color:+\e[36m}[=] $*${color:+\e[0m}"; }
warn() { echo -e "${color:+\e[33m}[-] $*${color:+\e[0m}"; }
### Helpers end

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS] <dev>

DESCRIPTION
    This script creates a new partition table with a single, bootable
    partition.

OPTIONS
    --32                 Only 32bit support (default is 64bit)
    --ext4               Format as ext4 (default)
    --fat32              Format as FAT32
    -h, --help           Display this help message
    -l, --label=LABEL    Set the ext4 partition label
    --legacy             Don't use UEFI
    --no-color           Disable colorized output
    --ntfs               Format as NTFS

EOF
    exit "$1"
}

declare -a args
unset help lbl legacy
bits="64bit"
color="true"
format="ext4"

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift; args+=("$@"); break ;;
        "--32") unset bits ;;
        "--ext4") format="ext4" ;;
        "--fat32") format="fat32" ;;
        "-h"|"--help") help="true" ;;
        "-l"|"--label"*) lbl="$(long_opt "$@")" ;;
        "--legacy") legacy="true" ;;
        "--no-color") unset color ;;
        "--ntfs") format="ntfs" ;;
        *) args+=("$1") ;;
    esac
    case "$?" in
        0) ;;
        1) shift ;;
        *) usage "$?" ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Help info
[[ -z $help ]] || usage 0

# Check for missing dependencies
declare -a deps
deps+=("fdisk")
deps+=("lsblk")
deps+=("mkfs.ext4")
deps+=("mkfs.fat")
deps+=("mkfs.ntfs")
deps+=("wipefs")
check_deps

# Check for valid params
[[ $# -eq 1 ]] || usage 1

while read -r dev; do
    sudo wipefs --all --force "$dev"
    err="$?"
    [[ $err -eq 0 ]] || exit $err
done < <(
    lsblk --list --paths "$1" | awk '!/NAME/ {print $1}' | sort -r
); unset dev

sleep 2

dev="$1"

if [[ -z $legacy ]]; then
    case "$format" in
        "ext4")
            sed "s/^\s*\([^# ]*\)\s*#.*/\1/" <<EOF | sudo fdisk "$dev"
                g  # clear the in memory partition table
                n  # new partition
                   # default - partition number 1
                   # default - start at beginning of disk
                   # default - extend partition to end of disk
                p  # print the in-memory partition table
                w  # write the partition table and exit
EOF
            ;;
        "fat32")
            sed "s/^\s*\([^# ]*\)\s*#.*/\1/" <<EOF | sudo fdisk "$dev"
                g  # clear the in memory partition table
                n  # new partition
                   # default - partition number 1
                   # default - start at beginning of disk
                   # default - extend partition to end of disk
                t  # change partition type
                c  # to FAT32
                p  # print the in-memory partition table
                w  # write the partition table and exit
EOF
            ;;
        "ntfs")
            sed "s/^\s*\([^# ]*\)\s*#.*/\1/" <<EOF | sudo fdisk "$dev"
                g  # clear the in memory partition table
                n  # new partition
                   # default - partition number 1
                   # default - start at beginning of disk
                   # default - extend partition to end of disk
                t  # change partition type
                86 # to ntfs
                p  # print the in-memory partition table
                w  # write the partition table and exit
EOF
            ;;
    esac
else
    case "$format" in
        "ext4")
            sed "s/^\s*\([^# ]*\)\s*#.*/\1/" <<EOF | sudo fdisk "$dev"
                o  # clear the in memory partition table
                n  # new partition
                p  # primary partition
                1  # partition number 1
                   # default - start at beginning of disk
                   # default - extend partition to end of disk
                a  # make a partition bootable
                p  # print the in-memory partition table
                w  # write the partition table and exit
EOF
            ;;
        "fat32")
            sed "s/^\s*\([^# ]*\)\s*#.*/\1/" <<EOF | sudo fdisk "$dev"
                o  # clear the in memory partition table
                n  # new partition
                p  # primary partition
                1  # partition number 1
                   # default - start at beginning of disk
                   # default - extend partition to end of disk
                a  # make a partition bootable
                t  # change partition type
                c  # to FAT32
                p  # print the in-memory partition table
                w  # write the partition table and exit
EOF
            ;;
        "ntfs")
            sed "s/^\s*\([^# ]*\)\s*#.*/\1/" <<EOF | sudo fdisk "$dev"
                o  # clear the in memory partition table
                n  # new partition
                p  # primary partition
                1  # partition number 1
                   # default - start at beginning of disk
                   # default - extend partition to end of disk
                a  # make a partition bootable
                t  # change partition type
                86 # to ntfs
                p  # print the in-memory partition table
                w  # write the partition table and exit
EOF
            ;;
    esac
fi
err="$?"
[[ $err -eq 0 ]] || exit $err

sleep 2

case "$format" in
    "ext4")
        sudo mkfs.ext4 -F -O "${bits:-^64bit}" ${lbl:+-L "$lbl"} \
            "${dev}1"
        ;;
    "fat32") sudo mkfs.fat -F 32 "${dev}1" ;;
    "ntfs") sudo mkfs.ntfs --force --fast ${lbl:+-L "$lbl"} "${dev}1"
        ;;
esac
