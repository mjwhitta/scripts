#!/usr/bin/env bash
# A script for adding aero style window snapping to Linux.
# by Miles Whittaker <mjwhitta@gmail.com>
#
# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2018 Miles Whittaker
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

err() { echo -e "${color:+\e[31m}[!] $@\e[0m"; }

errx() { echo -e "${color:+\e[31m}[!] ${@:2}\e[0m"; exit $1; }

good() { echo -e "${color:+\e[32m}[+] $@\e[0m"; }

info() { echo -e "${color:+\e[37m}[*] $@\e[0m"; }

long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 1 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || usage 1; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}

usage() {
    echo "Usage: ${0/*\//} [OPTIONS] [width] [height]"
    echo
    echo "Simple window management tool"
    echo
    echo "Options:"
    echo "    -b, --bottom             Snap active window to bottom"
    echo "                             bottom of screen"
    echo "    --bottom-left            Snap active window to"
    echo "                             bottom-left of screen"
    echo "    --bottom-right           Snap active window to"
    echo "                             bottom-right of screen"
    echo "    -c, --center             Snap active window to center"
    echo "                             of screen"
    echo "    -f, --frame=FRAME        Specify frame size (default:"
    echo "                             $frame)"
    echo "    -h, --help               Display this help message"
    echo "    -l, --left               Snap active window to left of"
    echo "                             screen"
    echo "    -m, --max                Maximize window"
    echo "    -n, --min                Minimize widow"
    echo "    --nocolor                Disable colorized output"
    echo "    -o, --offset=OFFSET      Specify offset from top of"
    echo "                             screen (default: $offset)"
    echo "    -p, --padding=PADDING    Specify padding around frame"
    echo "                             (default: $padding)"
    echo "    -r, --right              Snap active window to right of"
    echo "                             screen"
    echo "    -t, --top                Snap active window to top of"
    echo "                             screen"
    echo "    --top-left               Snap active window to top-left"
    echo "                             of screen"
    echo "    --top-right              Snap active window to"
    echo "                             top-right of screen"
    echo
    exit $1
}

warn() { echo -e "${color:+\e[33m}[-] $@\e[0m"; }

declare -a args
unset help
color="true"
frame=20
offset=0
padding=0
snap_hist="/tmp/snap.hist"

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-b"|"--bottom") snap_option="bottom" ;;
        "--bottom-left") snap_option="bottom-left" ;;
        "--bottom-right") snap_option="bottom-right" ;;
        "-c"|"--center") snap_option="center" ;;
        "-f"|"--frame"*) frame="$(long_opt "$@")" || shift ;;
        "-h"|"--help") help="true" ;;
        "-l"|"--left") snap_option="left" ;;
        "-m"|"--max") snap_option="max" ;;
        "-n"|"--min") snap_option="min" ;;
        "--nocolor") unset color ;;
        "-o"|"--offset"*) offset="$(long_opt "$@")" || shift ;;
        "-p"|"--padding"*) padding="$(long_opt "$@")" || shift ;;
        "-r"|"--right") snap_option="right" ;;
        "-t"|"--top") snap_option="top" ;;
        "--top-left") snap_option="top-left" ;;
        "--top-right") snap_option="top-right" ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ -z ${args[@]} ]] || set -- "${args[@]}"

# Check for valid params and missing dependencies
[[ -z $help ]] || usage 0
[[ $# -eq 0 ]] || [[ $# -eq 2 ]] || usage 2
for dep in perl wmctrl xdotool xrandr; do
    [[ -n $(command -v $dep) ]] || errx 3 "$dep is not installed"
done; unset dep

geometry="$(
    xrandr | perl -lne '/current ([^,]+),/ && print $1 =~ s/\s+//rg'
)"
[[ -n $geometry ]] || errx 4 "Can't figure out geometry!"
width="${geometry/x*/}"
height="${geometry/*x/}"

[[ $# -eq 2 ]] && width="$1" && height="$2"

height="$((height - offset))"
hw="$((width / 2))"
hhw="$((width / 4))"
hh="$((height / 2))"
hhh="$((height / 4))"
g="0"

[[ $padding -eq 0 ]] || padded="true"

# Wait for lock file to go away
for i in {1..20}; do
    [[ -f ${snap_hist}.lock ]] || break
    sleep 0.1
done

[[ ! -f ${snap_hist}.lock ]] || errx 5 "Lock file exists"

# Lock
touch ${snap_hist}.lock

# Get unique ID
wid="$(xdotool getactivewindow)"
wpid="$(xdotool getwindowpid $wid)"

# Check history file for entry and see if matches current location
previous="$(
    perl -lne '/'$wid'-'$wpid' ('$snap_option')/ && print $1' \
    $snap_hist 2>/dev/null
)"

# Remove old entry and remove any maximized attributes
cat $snap_hist 2>/dev/null | grep -v "$wid-$wpid" >$snap_hist
wmctrl -r :ACTIVE: -b remove,maximized_vert,maximized_horz

if [[ -z $previous ]]; then
    # Calculate snap values
    case "$snap_option" in
        "bottom")
            x="$padding"
            y="$((hh + (padding / 2) + offset))"
            w="$((width - (2 * padding)))"
            h="$((hh - (3 * padding / 2) - frame))"
            ;;
        "bottom-left")
            x="$padding"
            y="$((hh + (padding / 2) + offset))"
            w="$((hw - (3 * padding / 2)))"
            h="$((hh - (3 * padding / 2) - frame))"
            ;;
        "bottom-right")
            x="$((hw + (padding / 2)))"
            y="$((hh + (padding /  2) + offset))"
            w="$((hw - (3 * padding / 2)))"
            h="$((hh - (3 * padding / 2) - frame))"
            ;;
        "center")
            x="$((hhw + (padding / 2)))"
            y="$((padding + offset))"
            w="$((hw - (3 * padding / 2)))"
            h="$((height - (2 * padding) - frame))"
            ;;
        "left")
            x="$padding"
            y="$((padding + offset))"
            w="$((hw - (3 * padding / 2)))"
            h="$((height - (2 * padding) - frame))"
            ;;
        "max")
            x="$padding"
            y="$((padding + offset))"
            w="$((width - (2 * padding)))"
            h="$((height - (2 * padding) - frame))"
            ;;
        "min")
            x="$((hhw + (padding / 2)))"
            y="$((hhh + (padding / 2) + offset))"
            w="$((hw - (3 * padding / 2)))"
            h="$((hh - (3 * padding / 2) - frame))"
            ;;
        "right")
            x="$((hw + (padding / 2)))"
            y="$((padding + offset))"
            w="$((hw - (3 * padding / 2)))"
            h="$((height - (2 * padding) - frame))"
            ;;
        "top")
            x="$padding"
            y="$((padding + offset))"
            w="$((width - (2 * padding)))"
            h="$((hh - (3 * padding / 2) - frame))"
            ;;
        "top-left")
            x="$((padding))"
            y="$((padding + offset))"
            w="$((hw - (3 * padding / 2)))"
            h="$((hh - (3 * padding / 2) - frame))"
            ;;
        "top-right")
            x="$((hw + (padding / 2)))"
            y="$((padding + offset))"
            w="$((hw - (3 * padding / 2)))"
            h="$((hh - (3 * padding / 2) - frame))"
            ;;
    esac

    # Snap
    wmctrl -r :ACTIVE: -e $g,$x,$y,$w,$h

    # Set any needed maximized attributes
    case "$snap_option" in
        "bottom")
            if [[ -z $padded ]]; then
                wmctrl -r :ACTIVE: -b add,maximized_horz
            fi
            ;;
        "bottom-left") ;;
        "bottom-right") ;;
        "center")
            if [[ -z $padded ]]; then
                wmctrl -r :ACTIVE: -b add,maximized_vert
            fi
            ;;
        "left")
            if [[ -z $padded ]]; then
                wmctrl -r :ACTIVE: -b add,maximized_vert
            fi
            ;;
        "max")
            if [[ -z $padded ]]; then
                wmctrl -r :ACTIVE: -b \
                    add,maximized_vert,maximized_horz
            fi
            ;;
        "min") wmctrl -r :ACTIVE: -b add,hidden ;;
        "right")
            if [[ -z $padded ]]; then
                wmctrl -r :ACTIVE: -b add,maximized_vert
            fi
            ;;
        "top")
            if [[ -z $padded ]]; then
                wmctrl -r :ACTIVE: -b add,maximized_horz
            fi
            ;;
        "top-left") ;;
        "top-right") ;;
    esac

    # Create new entry
    if [[ $snap_option != "min" ]]; then
        echo "$wid-$wpid $snap_option" >>$snap_hist
    fi
else
    # Calculate snap values
    x="$((hhw + (padding / 2)))"
    y="$((hhh + (padding / 2) + offset))"
    w="$((hw - (3 * padding / 2)))"
    h="$((hh - (3 * padding / 2) - frame))"

    # Snap
    wmctrl -r :ACTIVE: -e $g,$x,$y,$w,$h

    # Remove history file if empty
    [[ -n $(cat $snap_hist 2>/dev/null) ]] || rm -f $snap_hist
fi

# Unlock
rm -f ${snap_hist}.lock
