#!/usr/bin/env bash

### Helpers begin
check_deps() {
    for d in "${deps[@]}"; do
        [[ -n $(command -v "$d") ]] || errx 128 "$d is not installed"
    done; unset d
}
err() { echo -e "${color:+\e[31m}[!] $*\e[0m"; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*\e[0m"; }
info() { echo -e "${color:+\e[37m}[*] $*\e[0m"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || usage 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*\e[0m"; }
warn() { echo -e "${color:+\e[33m}[-] $*\e[0m"; }
### Helpers end

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS]

Very easily set resolution.

Options:
    -h, --help       Display this help message
    -r, --res=WxH    Use specified resolution

EOF
    exit "$1"
}

declare -a args deps
unset help res
color="true"
deps+=("cvt")
deps+=("xrandr")

# Check for missing dependencies
check_deps

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-h"|"--help") help="true" ;;
        "-r"|"--res"*) res="$(long_opt "$@")" || shift ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Check for valid params
[[ -z $help ]] || usage 0
[[ $# -eq 0 ]] || usage 1
[[ -n $res ]] || usage 2

display="$(xrandr | grep -ioPs "^\S+(?=\s+connected\s+)")"
modeline="$(
    cvt "${res/x*/}" "${res/*x/}" | tail -n 1 | \
    sed -r "s/^Modeline |\"|_60\.00//g"
)"

name="${modeline%% *}"
modeline="${modeline#* }"

# Add specified resolution if needed
if [[ -z $(xrandr | grep -Ps "^\s+$name\s+") ]]; then
    xrandr --newmode "$name" "$modeline"
    xrandr --addmode "$display" "$name"
fi

# Set specified resolution
xrandr --output "$display" --mode "$name"

# Fix some other things
if [[ -n $(command -v nitrogen) ]] && [[ -n $(pgrep nitrogen) ]]; then
    nitrogen --restore
fi
if [[ -n $(command -v openbox) ]] && [[ -n $(pgrep openbox) ]]; then
    openbox --restart
fi
[[ -z $(command -v snapwin) ]] || snapwin --replay
