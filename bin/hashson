#!/usr/bin/env bash
# A script to minimize duplicate files.
# by Miles Whittaker <mj@whitta.dev>
#
# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2020 Miles Whittaker
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

### Helpers begin
check_deps() {
    local missing
    for d in "${deps[@]}"; do
        if [[ -z $(command -v "$d") ]]; then
            # Force absolute path
            if [[ ! -e "/$d" ]]; then
                err "$d was not found"
                missing="true"
            fi
        fi
    done; unset d
    [[ -z $missing ]] || exit 128
}
err() { echo -e "${color:+\e[31m}[!] $*\e[0m"; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*\e[0m"; }
info() { echo -e "${color:+\e[37m}[*] $*\e[0m"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || return 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || return 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*\e[0m"; }
warn() { echo -e "${color:+\e[33m}[-] $*\e[0m"; }
### Helpers end

minimize() {
    local ext f h line prev

    echo "{"

    while read -r line; do
        h="${line%% *}"
        f="${line##* }"

        ext="${f##*.}"
        ext="${ext:+.$ext}"

        case "$prev" in
            "")
                echo "  \"${hashcmd%%sum}_$h\": ["
                echo -n "    \"$f\""
                mv "$f" "$h$ext"
                ;;
            "$h")
                echo ","
                echo -n "    \"$f\""
                rm -f "$f"
                ;;
            *)
                echo
                echo "  ],"
                echo "  \"${hashcmd%%sum}_$h\": ["
                echo -n "    \"$f\""
                mv "$f" "$h$ext"
                ;;
        esac

        prev="$h"
    done < <("$hashcmd" "$@" | sort); unset line

    echo
    echo "  ]"
    echo "}"
}

undo() {
    local -a del
    local ext f h line

    while read -r line; do
        h="${line##*_}"

        while read -r f; do
            ext="${f##*.}"
            ext="${ext:+.$ext}"

            cp -f "$h$ext" "$f" &
        done < <(jq -cMrS ".$line[]" "$output"); unset f

        del+=("$h$ext")
    done < <(jq -cMrS ".|keys[]" "$output"); unset line

    wait -f

    rm -f "${del[@]}"
}

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS]

DESCRIPTION
    Minimize duplicate files by creating a mapping of hash to
    filename.

OPTIONS
    -h, --help        Display this help message
    -m, --md5         Use md5
    --no-color        Disable colorized output
    -o, --out=FILE    Output to specified file (default: hashmap.json)
    -s, --sha         Use sha256 (default)
    -u, --undo=FILE   Read hashmap and undo hashson minimization

EOF
    exit "$1"
}

declare -a args
unset help
action="minimize"
color="true"
hashcmd="sha256sum"
output="hashmap.json"

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift; args+=("$@"); break ;;
        "-h"|"--help") help="true" ;;
        "-m"|"--md5") hashcmd="md5sum" ;;
        "--no-color") unset color ;;
        "-o"|"--out"*) output="$(long_opt "$@")" ;;
        "-s"|"--sha") hashcmd="sha256sum" ;;
        "-u"|"--undo"*) action="undo"; output="$(long_opt "$@")" ;;
        *) args+=("$1") ;;
    esac
    case "$?" in
        0) ;;
        1) shift ;;
        *) usage $? ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Help info
[[ -z $help ]] || usage 0

# Check for missing dependencies
declare -a deps
deps+=("jq")
deps+=("md5sum")
deps+=("sha256sum")
deps+=("sort")
check_deps

# Check for valid params
case "$action" in
    "minimize") [[ $# -gt 0 ]] || usage 1 ;;
    "undo") [[ $# -eq 0 ]] || usage 1 ;;
esac

case "$action" in
    "minimize") minimize "$@" | tee "$output" ;;
    "undo") undo ;;
esac
