#!/usr/bin/env bash
# A script to update a dynamic DNS entry using Google Domains API.
# by Miles Whittaker <mj@whitta.dev>
#
# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2020 Miles Whittaker
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

### Helpers begin
check_deps() {
    local missing
    for d in "${deps[@]}"; do
        if [[ -z $(command -v "$d") ]]; then
            # Force absolute path
            if [[ ! -e "/$d" ]]; then
                err "$d was not found"
                missing="true"
            fi
        fi
    done; unset d
    [[ -z $missing ]] || exit 128
}
err() { echo -e "${color:+\e[31m}[!] $*${color:+\e[0m}" >&2; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*${color:+\e[0m}"; }
info() { echo -e "${color:+\e[37m}[*] $*${color:+\e[0m}"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || return 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || return 127; arg="$1" ;;
    esac
    echo "$arg"
    return "$shift"
}
subinfo() { echo -e "${color:+\e[36m}[=] $*${color:+\e[0m}"; }
warn() { echo -e "${color:+\e[33m}[-] $*${color:+\e[0m}"; }
### Helpers end

update_dns() {
    local creds="$username:$password"
    local query="hostname=$domain&myip=$1"
    curl -kLs "https://$creds@domains.google.com/nic/update?$query"
    echo
}

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS]

DESCRIPTION
    Detect when IP changes and update dynamic DNS entry using Google
    Domains API.

OPTIONS
    -d, --domain=DOMAIN    Domain entry to update
    -e, --external         Use external IP (default)
    -f, --file=FILE        Compare to IP in specified file
    --force                Update even if IP hasn't changed
    -h, --help             Display this help message
    -i, --internal         Use internal IP
    --iface=IFACE          Use specified interface (default: $iface)
    --ip=IP                Compare to specified IP
    --newip=IP             Use the specified IP as the new address
    --no-color             Disable colorized output
    -p, --pass=PASSWD      Password for API
    --url=URL              URL that returns just an IP (default: $url)
    -u, --user=USER        Username for API

EOF
    exit "$1"
}

declare -a args
unset domain file force help old_ip password username
color="true"
curl="curl --connect-timeout 8 -kLm 8 -s"
external="true"
iface="$(ip -o a | grep -m 1 -oPs "\d:\s+\K[^l][^o]\S*")"
url="https://icanhazip.com"

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift; args+=("$@"); break ;;
        "-d"|"--domain"*) domain="$(long_opt "$@")" ;;
        "-e"|"--external") external="true" ;;
        "-f"|"--file"*) file="$(long_opt "$@")" ;;
        "--force") force="true" ;;
        "-h"|"--help") help="true" ;;
        "-i"|"--internal") unset external ;;
        "--iface"*) iface="$(long_opt "$@")" ;;
        "--ip"*) old_ip="$(long_opt "$@")" ;;
        "--newip"*) new_ip="$(long_opt "$@")" ;;
        "--no-color") unset color ;;
        "-p"|"--pass"*) password="$(long_opt "$@")" ;;
        "--url"*) url="$(long_opt "$@")" ;;
        "-u"|"--user"*) username="$(long_opt "$@")" ;;
        *) args+=("$1") ;;
    esac
    case "$?" in
        0) ;;
        1) shift ;;
        *) usage "$?" ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Help info
[[ -z $help ]] || usage 0

# Check for missing dependencies
declare -a deps
deps+=("curl")
deps+=("ip")
check_deps

# Check for valid params
[[ $# -eq 0 ]] || usage 1
[[ -n $domain ]] || usage 2
[[ -n $iface ]] || usage 3
[[ -n $password ]] || usage 4
[[ -n $username ]] || usage 5

# Get data
[[ -z $file ]] || [[ ! -f "$file" ]] || old_ip="$(head -n 1 "$file")"
if [[ -z $new_ip ]]; then
    if [[ -n $external ]]; then
        new_ip="$($curl --interface "$iface" "$url")"
    else
        new_ip="$(ip -o a | awk "/$iface\s+inet\s/ {print \$4}")"
        new_ip="${new_ip%/*}"
    fi
fi

# Compare and update
if [[ -n $force ]] ||
   [[ -z $old_ip ]] ||
   [[ "$new_ip" != "$old_ip" ]]
then
    [[ -z $file ]] || echo "$new_ip" | tee "$file"
    update_dns "$new_ip"
fi
