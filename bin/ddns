#!/usr/bin/env bash
# A script to update a dynamic DNS entry using Google Domains API.
# by Miles Whittaker <mjwhitta@gmail.com>
#
# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2018 Miles Whittaker
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

update_dns() {
    local creds="$username:$password"
    local query="hostname=$domain&myip=$1"
    curl -kLs "https://$creds@domains.google.com/nic/update?$query"
}

usage() {
    echo "Usage: ${0/*\//} [OPTIONS]"
    echo
    echo "Detect when IP changes and update dynamic DNS entry using"
    echo "Google Domains API"
    echo
    echo "Options:"
    echo "    -d, --domain=DOMAIN    Domain entry to update"
    echo "    -e, --external         Use external IP (default)"
    echo "    -f, --file=FILE        Compare to IP in specified file"
    echo "    -h, --helpo            Display this help message"
    echo "    -i, --iface=IFACE      Use internal IP (default $iface)"
    echo "    --ip=IP                Compare to specified IP"
    echo "    -p, --pass=PASSWD      Password for API"
    echo "    --url=URL              URL that returns just an IP"
    echo "                           (default: $ip_url)"
    echo "    -u, --user=USER        Username for API"
    echo
    exit $1
}

declare -a args
unset domain file old_ip password username
external="true"
iface="$(ip -o a | awk '!/\slo\s/ && /inet\s/ {print $2; exit}')"
ip_url="https://icanhazip.com"

while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-d"|"--domain"*)
            case "$1" in
                "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 1 ;;
                *) shift; [[ $# -gt 0 ]] || usage 1; arg="$1" ;;
            esac
            domain="$arg"
            ;;
        "-e"|"--external") external="true" ;;
        "-f"|"--file"*)
            case "$1" in
                "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 1 ;;
                *) shift; [[ $# -gt 0 ]] || usage 1; arg="$1" ;;
            esac
            file="$arg"
            ;;
        "-h"|"--help") usage 0 ;;
        "-i"|"--iface"*)
            case "$1" in
                "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 1 ;;
                *) shift; [[ $# -gt 0 ]] || usage 1; arg="$1" ;;
            esac
            iface="$arg"
            unset external
            ;;
        "--ip"*)
            case "$1" in
                "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 1 ;;
                *) shift; [[ $# -gt 0 ]] || usage 1; arg="$1" ;;
            esac
            old_ip="$arg"
            ;;
        "-p"|"--pass"*)
            case "$1" in
                "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 1 ;;
                *) shift; [[ $# -gt 0 ]] || usage 1; arg="$1" ;;
            esac
            password="$arg"
            ;;
        "--url"*)
            case "$1" in
                "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 1 ;;
                *) shift; [[ $# -gt 0 ]] || usage 1; arg="$1" ;;
            esac
            ip_url="$arg"
            ;;
        "-u"|"--user"*)
            case "$1" in
                "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 1 ;;
                *) shift; [[ $# -gt 0 ]] || usage 1; arg="$1" ;;
            esac
            username="$arg"
            ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ -z ${args[@]} ]] || set -- "${args[@]}"

# Validate options
[[ $# -eq 0 ]] || usage 2
[[ -n $domain ]] || usage 3
[[ -n $password ]] || usage 4
[[ -n $username ]] || usage 5
[[ -n $external ]] || [[ -n $iface ]] || usage 6

# Get data
[[ -z $file ]] || [[ ! -f $file ]] || old_ip="$(head -n 1 $file)"
if [[ -n $external ]]; then
    new_ip="$(curl --connect-timeout 7 -kL -m 7 -s "$ip_url")"
else
    new_ip="$(ip -o a | awk "/$iface\s+inet\s/ {print \$4}")"
    new_ip="${new_ip%/*}"
fi

# Compare and update
if [[ -z $old_ip ]] || [[ $new_ip != $old_ip ]]; then
    echo "$new_ip" | tee $file
    update_dns "$new_ip"
fi
