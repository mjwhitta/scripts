#!/usr/bin/env bash

### Helpers begin
check_deps() {
    local missing
    for d in "${deps[@]}"; do
        if [[ -z $(command -v "$d") ]]; then
            # Force absolute path
            if [[ ! -e "/$d" ]]; then
                err "$d was not found"
                missing="true"
            fi
        fi
    done; unset d
    [[ -z $missing ]] || exit 128
}
err() { echo -e "${color:+\e[31m}[!] $*\e[0m"; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*\e[0m"; }
info() { echo -e "${color:+\e[37m}[*] $*\e[0m"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || return 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || return 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*\e[0m"; }
warn() { echo -e "${color:+\e[33m}[-] $*\e[0m"; }
### Helpers end

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS] <pem/der>

DESCRIPTION
    Convert a TLS cert to the format in /etc/ssl/certs.

OPTIONS
    -h, --help           Display this help message
    -i, --inform=FORM    Use specified inform (default: pem)
    --no-color           Disable colorized output

EOF
    exit "$1"
}

declare -a args
unset help
color="true"
inform="pem"

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift; args+=("$@"); break ;;
        "-h"|"--help") help="true" ;;
        "-i"|"--inform"*) inform="$(long_opt "$@")" ;;
        "--no-color") unset color ;;
        *) args+=("$1") ;;
    esac
    case "$?" in
        0) ;;
        1) shift ;;
        *) usage $? ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Help info
[[ -z $help ]] || usage 0

# Check for missing dependencies
declare -a deps
deps+=("openssl")
check_deps

# Check for valid params
[[ $# -eq 1 ]] || usage 1

case "$inform" in
    "der")
        pem="/tmp/$(basename "$1" ".der").pem"
        openssl x509 -in "$1" -inform der -out "$pem"
        ;;
    "pem")
        cp "$1" "/tmp/$1"
        pem="/tmp/$1" ;;
    *) errx 2 "Invalid cert form" ;;
esac

hash="$(
    openssl x509 -in "$pem" -inform pem -subject_hash_old | head -n 1
)"
openssl x509 -in "$pem" -inform pem -subject_hash_old | tail -n +2 \
    >"$hash.0"
openssl x509 -in "$pem" -inform pem -nocert -text >>"$hash.0"

rm -f "$pem"
