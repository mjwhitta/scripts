#!/usr/bin/env bash
# A convenience script for updating all git repos under a directory.
# by Miles Whittaker <mjwhitta@gmail.com>
#
# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2018 Miles Whittaker
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

### Helpers begin
set -o noglob
checkdeps() {
    for d in "${deps[@]}"; do
        [[ -n $(command -v $d) ]] || errx 128 "$d is not installed"
    done; unset d
}
clean() {
    [[ ${1:-0} -ne 0 ]] || [[ ! -d $cache ]] || rm -rf $cache
    [[ -z $script ]] || [[ ! -f $script ]] || rm -f $script
    echo -en "\e[?25h" # Show cursor again
    exit ${1:-0}
}
err() { echo -e "${color:+\e[31m}[!] $@\e[0m"; }
errx() { echo -e "${color:+\e[31m}[!] ${@:2}\e[0m"; clean $1; }
good() { echo -e "${color:+\e[32m}[+] $@\e[0m"; }
info() { echo -e "${color:+\e[37m}[*] $@\e[0m"; }
json_get() {
    [[ -z $json ]] || jq -cr ".$@" $json | sed -r "s/^null$//g"
}
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || usage 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $@\e[0m"; }
warn() { echo -e "${color:+\e[33m}[-] $@\e[0m"; }
### Helpers end

read_resume_file() { echo -n; }

usage() {
    echo "Usage: ${0##*/} [OPTIONS] <dir1>... [dirN]"
    echo
    echo "Update git repos under specified directory"
    echo
    echo "Options:"
    echo "    -h, --help           Display this help message"
    echo "    --nocolor            Disable colorized output"
    echo "    -r, --resume         Resume from a previous run"
    echo "    -t, --threads=NUM    Use the specied number of threads"
    echo "                         (default: $threads)"
    echo "    -v, --verbose        Do not hide parallel errors"
    echo
    exit $1
}

write_resume_file() {
    [[ -z $cache ]] || rm -rf $cache
    mkdir -p $cache
    cat >$json <<EOF
{}
EOF
}

declare -a args deps
unset help
cache="${0##*/}.resume"
color="true"
deps+=("git")
deps+=("jq")
joblog="$cache/joblog.txt"
json="$cache/${0##*/}.json"
parallel="true"
threads="32"

# Check for missing dependencies
checkdeps

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-h"|"--help") help="true" ;;
        "--nocolor") unset color ;;
        "-r"|"--resume") resume="--resume" ;;
        "-t"|"--threads"*) threads="$(long_opt "$@")" || shift ;;
        "-v"|"--verbose") verbose="true" ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ -z ${args[@]} ]] || set -- "${args[@]}"

# Check for valid params
[[ -z $help ]] || usage 0
[[ $# -gt 0 ]] || [[ -n $resume ]] || usage 1

# Determine parallel situation
if [[ -n $parallel ]] && [[ -z $(command -v parallel) ]]; then
    warn "Parallel is not installed, defaulting to single-threaded"
    unset parallel
fi

# Cite if needed
if [[ -n $parallel ]] && [[ ! -f $HOME/.parallel/will-cite ]]; then
    mkdir -p $HOME/.parallel
    parallel --citation
fi

if [[ -n $parallel ]]; then
    # Ensure resume directory exists
    mkdir -p $cache

    # Check for resume file
    if [[ -f $json ]] && [[ -z $resume ]]; then
        warn "Resume file found" >&2
        while :; do
            # Prompt whether to overwrite or resume
            read -n 1 -p "Would you like to resume [y/n/q]: " -s ans
            echo

            case "$ans" in
                "n") write_resume_file; break ;;
                "q") exit 0 ;;
                "y") read_resume_file; resume="--resume"; break ;;
                *) echo "Invalid response, try again!" ;;
            esac
        done
    elif [[ -f $json ]]; then
        read_resume_file
    elif [[ -n $resume ]]; then
        errx 2 "No resume file found in current directory"
    else
        write_resume_file
    fi
fi

# Dataset used by parallel
dataset="$cache/${0##*/}.dataset"

# Script used by parallel
script="/tmp/${0##*/}.parallel"

# Ensure cleanup on ^C
trap "clean 126" SIGINT

# Hide cursor
echo -en "\e[?25l"

# Process dataset
info "Processing dataset for jobs"

if [[ ! -f $dataset ]]; then
    total="0"
    while read -r data; do
        ((total += 1))
        echo "$data" >>$dataset
    done < <(
        find -L $@ -ipath "*archived*" -prune -o -type d \
        -name ".git" -exec dirname {} + 2>/dev/null
    ); unset data
else
    total="$(cat $dataset | wc -l)"
fi
[[ $total -gt 0 ]] || errx 0 "No dataset provided"

subinfo "$total jobs to run"

# Create sub-script
cat >$script <<EOF
#!/usr/bin/env bash

### Helpers begin
set -o noglob
err() { echo -e "\r${color:+\e[31m}[!] \$@\e[0m\e[K"; }
errx() { echo -e "\r${color:+\e[31m}[!] \${@:2}\e[0m\e[K"; exit \$1; }
good() { echo -e "\r${color:+\e[32m}[+] \$@\e[0m\e[K"; }
info() { echo -e "\r${color:+\e[37m}[*] \$@\e[0m\e[K"; }
subinfo() { echo -e "\r${color:+\e[36m}[=] \$@\e[0m\e[K"; }
warn() { echo -e "\r${color:+\e[33m}[-] \$@\e[0m\e[K"; }
### Helpers end

if [[ -n \$(git -C \$1 config remote.origin.url) ]]; then
    stash="\$(
        git -C \$1 status --porcelain | grep -Es "^[^#?]{2}"
    )"
    if [[ -n \$stash ]]; then
        warn "\$1: stashing changes"
        git -C \$1 stash &>/dev/null
        [[ \$? -eq 0 ]] || errx 3 "\$1: error ocurred while stashing"
    fi

    good "\$1: pulling changes"
    git -C \$1 pull -r &>/dev/null
    [[ \$? -eq 0 ]] || errx 4 "\$1: error ocurred while pulling"

    if [[ -n \$stash ]]; then
        warn "\$1: restoring changes"
        git -C \$1 stash pop &>/dev/null
        if [[ \$? -ne 0 ]]; then
            errx 5 "\$1: error ocurred while unstashing"
        fi
    fi
else
    warn "\$1: no remote origin"
fi
EOF
chmod 700 $script

# Run sub-script
if [[ -n $parallel ]]; then
    parallel -a $dataset --bar --joblog ${resume:++}$joblog --lb \
        -P $threads -r $resume $script {}
    [[ -n $verbose ]] || echo -en "\e[1A\e[K" >&2
else
    count="1"
    while read -r data; do
        echo -e "\r\e[K" >&2
        echo -en "${color:+\e[37m}[$count/$total]\e[0m\e[K\e[1A" >&2
        $script "$data"
        ((count += 1))
    done <$dataset; unset data
fi

clean
