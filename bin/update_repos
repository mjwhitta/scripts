#!/usr/bin/env bash
# A convenience script for updating all git repos under a directory.
# by Miles Whittaker <mjwhitta@gmail.com>
#
# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2018 Miles Whittaker
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

clean() { rm -f $script; exit 0; }

err() { [[ -z $clr ]] || echo -en "\e[31m"; echo -e "[!] $@\e[0m"; }

info() { [[ -z $clr ]] || echo -en "\e[37m"; echo -e "[=] $@\e[0m"; }

usage() {
    echo "Usage: ${0/*\//} [OPTIONS] <dir>"
    echo
    echo "Update git repos under specified directory"
    echo
    echo "Options:"
    echo "    -h, --help           Display this help message"
    echo "    --nocolor            Don't colorize output"
    echo "    -p, --parallel       Run using parallel (if installed)"
    local default="(default: $threads)"
    echo "    -t, --threads=NUM    Use the specied number of threads"
    echo "                         if running in parallel $default"
    echo
    exit $1
}

warn() { [[ -z $clr ]] || echo -en "\e[33m"; echo -e "[-] $@\e[0m"; }

declare -a args
unset help parallel
clr="true"
threads="32"

while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-h"|"--help") help="true" ;;
        "--nocolor") unset clr ;;
        "-p"|"--parallel") parallel="true" ;;
        "-t"|"--threads"*)
            case "$1" in
                "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 1 ;;
                *) shift; [[ $# -gt 0 ]] || usage 1; arg="$1" ;;
            esac
            threads="$arg"
            ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ -z ${args[@]} ]] || set -- "${args[@]}"

[[ -z $help ]] || usage 0
[[ $# -ge 1 ]] || usage 2

if [[ -z $(command -v git) ]]; then
    err "git is not installed"
    exit 3
fi

if [[ -n $parallel ]] && [[ -z $(command -v parallel) ]]; then
    warn "Parallel is not installed, using default behavior"
    unset parallel
fi

if [[ -n $parallel ]] && [[ ! -f $HOME/.parallel/will-cite ]]; then
    mkdir -p $HOME/.parallel
    parallel --citation
fi

script="/tmp/${0/*\//}.parallel"
trap clean SIGINT

cat >$script <<EOF
#!/usr/bin/env bash
err() {
$([[ -z $clr ]] || echo "    echo -en \"\\e[31m\"")
    echo -e "\\r[!] \$@\\e[0m\\e[K"
}
info() {
$([[ -z $clr ]] || echo "    echo -en \"\\e[32m\"")
    echo -e "\\r[+] \$@\\e[0m\\e[K"
}
warn() {
$([[ -z $clr ]] || echo "    echo -en \"\\e[33m\"")
    echo -e "\\r[-] \$@\\e[0m\\e[K"
}
if [[ -n \$(git -C \$1 config remote.origin.url) ]]; then
    stash="\$(
        git -C \$1 status --porcelain | grep -Es "^[^#?]{2}"
    )"
    if [[ -n \$stash ]]; then
        warn "\$1: stashing changes"
        git -C \$1 stash &>/dev/null
        if [[ \$? -ne 0 ]]; then
            err "\$1: error ocurred while stashing"
            exit
        fi
    fi

    info "\$1: pulling changes"
    git -C \$1 pull -r &>/dev/null
    if [[ \$? -ne 0 ]]; then
        err "\$1: error ocurred while pulling"
        exit
    fi

    if [[ -n \$stash ]]; then
        warn "\$1: restoring changes"
        git -C \$1 stash pop &>/dev/null
        if [[ \$? -ne 0 ]]; then
            err "\$1: error ocurred while unstashing"
            exit
        fi
    fi
else
    warn "\$1: no remote origin"
fi
EOF
chmod 700 $script

info "Processing dataset for jobs"

declare -a dataset=($(
    find -L $1 -ipath "*archived*" -prune -o -type d \
    -name ".git" -exec dirname {} + 2>/dev/null
))
let "total = ${#dataset[@]}"

if [[ $total -eq 0 ]]; then
    err "No dataset provided"
    exit 3
fi

info "$total jobs to run"
if [[ -n $parallel ]]; then
    # Math
    left="$total"
    marker="0"
    maxdata="$(
        parallel -r --show-limit </dev/null | \
        awk '/Maximal used/ {print $NF; exit}'
    )"
    let "remainder = total % maxdata"
    round="0"
    let "rounds = total / maxdata"
    [[ $remainder -eq 0 ]] || let "rounds += 1"

    # Loop thru rounds
    [[ $rounds -eq 1 ]] || info "Splitting into $rounds rounds"
    while [[ $left -gt 0 ]]; do
        let "round += 1"
        [[ $rounds -eq 1 ]] || warn "Round $round"

        increment="$left"
        [[ $left -le $maxdata ]] || increment="$maxdata"

        parallel --bar --lb -P $threads -r $script {} ::: \
            ${dataset[@]:$marker:$increment}

        let "left -= increment"
        let "marker += increment"
        echo -en "\e[1A\e[K"
    done
else
    let "count = 1"
    for data in "${dataset[@]}"; do
        echo -en "\n\r[$count/$total]\e[K\e[1A" >&2
        $script "$data"
        let "count += 1"
    done; unset data
fi

clean
