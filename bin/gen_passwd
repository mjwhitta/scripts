#!/usr/bin/env bash
# A script for generating passwords from /dev/urandom.
# by Miles Whittaker <mjwhitta@gmail.com>
#
# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2018 Miles Whittaker
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

function gen_passwd() {
    gp_cleanup() {
        unset arg args char help length passwd regex
        unset -f gp_cleanup gp_usage
    }

    gp_usage() {
        echo "Usage: gen_passwd [OPTIONS]"
        echo
        echo "Generate passwords using /dev/urandom"
        echo
        echo "Options:"
        echo "    -h, --help           Display this help message"
        echo "    -l, --length=LEN     Use specified length (default:"
        echo "                         $length)"
        echo "    -r, --regex=REGEX    Generate password matching"
        echo "                         specified regex (default:"
        echo "                         $regex)"
        echo
        gp_cleanup
    }

    declare -a args
    unset help
    length=64
    regex="[-A-Za-z0-9\`~!@#$%^&*()_+={}|;:'\",<.>/?]"

    while [[ $# -gt 0 ]]; do
        case "$1" in
            "--") shift && args+=("$@") && break ;;
            "-h"|"--help") help="true" ;;
            "-l"|"--length"*)
                case "$1" in
                    "--"*"="*)
                        arg="${1#*=}"
                        [[ -z $arg ]] && gp_usage && return 1
                        ;;
                    *)
                        shift; [[ $# -eq 0 ]] && gp_usage && return 1
                        arg="$1"
                        ;;
                esac
                length="$arg"
                ;;
            "-r"|"--regex"*)
                case "$1" in
                    "--"*"="*)
                        arg="${1#*=}"
                        [[ -z $arg ]] && gp_usage && return 1
                        ;;
                    *)
                        shift; [[ $# -eq 0 ]] && gp_usage && return 1
                        arg="$1"
                        ;;
                esac
                regex="$arg"
                ;;
            *) args+=("$1") ;;
        esac
        shift
    done
    [[ -z ${args[@]} ]] || set -- "${args[@]}"

    [[ -n $help ]] && gp_usage && return 0
    [[ $# -gt 0 ]] && gp_usage && return 2

    unset passwd
    while [[ $(echo -n "$passwd" | wc -c) -lt $length ]]; do
        char="$(head -c 1 /dev/urandom | grep -Es "$regex")"
        [[ -z $char ]] || passwd="$passwd$char"
    done

    echo "$passwd"

    gp_cleanup
}

if [[ -n ${BASH_SOURCE[0]} ]]; then
    case "$0" in
        *"bash") ;;
        *) gen_passwd "$@" ;;
    esac
fi
