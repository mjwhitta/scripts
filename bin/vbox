#!/usr/bin/env bash
# A minimal Vagrant-like bash script for VirtualBox.
# by Miles Whittaker <mjwhitta@gmail.com>
#
# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2018 Miles Whittaker
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

usage() {
    echo "Usage: ${0/*\//} [OPTIONS] <action>"
    echo
    echo "This tool is a minimal Vagrant-like bash script for"
    echo "managing VirtualBox VMs. The VMs need to already exist in"
    echo "VirtualBox. There is no support for box files."
    echo
    echo "WARNING: Don't put spaces in VM names, snapshot names, or"
    echo "port forwarding rules!"
    echo
    echo "Options:"
    echo "    -h, --help"
    echo "        Display this help message."
    echo
    echo "Actions:"
    echo "    destroy [vm1]..[vmN]"
    echo "        Remove specified VM or all VMs"
    echo
    echo "    halt [vm1]..[vmN]"
    echo "        Poweroff specified VM or all VMs."
    echo
    echo "    help"
    echo "        Display this help message."
    echo
    echo "    list"
    echo "        List VMs."
    echo
    echo "    port   delete <NAME> [vm1]..[vmN]"
    echo -n "           forward <NAME> <HOST_PORT> <GUEST_PORT> "
    echo "[vm1]...[vmN]"
    echo "           list [vm1]..[vmN]"
    echo "        Manage forwarded ports of specified VM or all VMs."
    echo
    echo "    ssh <vm> [user] [identity_file]"
    echo "        SSH into the specified VM if SSH is port forwarded."
    echo
    echo "    ssh-config <vm> [user] [identity_file]"
    echo "        Output .ssh/config for the specified VM."
    echo
    echo "    snapshot   delete <SNAPSHOT> [vm1]..[vmN]"
    echo "               list [vm1]..[vmN]"
    echo "               restore <SNAPSHOT> [vm1]..[vmN]"
    echo "               take [vm1]..[vmN]"
    echo "        Manage snapshots of specified VM or all VMs."
    echo
    echo "    status [vm1]..[vmN]"
    echo "        Show the state of specified VM or all VMs."
    echo
    echo "    suspend [vm1]..[vmN]"
    echo "        Save the state of specified VM or all VMs."
    echo
    echo "    up [detached|gui] [vm1]..[vmN]"
    echo "        Start specified VM or all VMs. Specify \"gui\" for"
    echo "        a gui. (default: headless)"
    echo
    exit $1
}

vbox_destroy() {
    vms="$@"
    [[ $# -gt 0 ]] || vms="$(vbox_list)"

    for vm in "$vms"; do
        vm_exists $vm || continue

        echo "Destroying $vm..."
        VBoxManage unregistervm --delete $vm
        echo "done"
    done
}

vbox_halt() {
    vms="$@"
    [[ $# -gt 0 ]] || vms="$(vbox_list)"

    for vm in "$vms"; do
        vm_exists $vm || continue

        echo "Powering off $vm..."
        VBoxManage controlvm "$vm" poweroff
        echo "done"
    done
}

vbox_list() {
    [[ $# -eq 0 ]] || usage 4
    VBoxManage list vms | perl -lne '/^"(.*)" .*/ && print $1'
}

vbox_port() {
    [[ $# -gt 0 ]] || usage 5

    subaction="$1" && shift

    case "$subaction" in
        "delete") vbox_port_delete $@ ;;
        "forward") vbox_port_forward $@ ;;
        "list") vbox_port_list $@ ;;
        *) usage 6 ;;
    esac
}

vbox_port_delete() {
    [[ $# -ge 1 ]] || usage 7

    rule="$1" && shift

    vms="$@"
    [[ $# -gt 0 ]] || vms="$(vbox_list)"

    for vm in "$vms"; do
        vm_exists $vm || continue
        vm_forwarding_port $vm $rule || continue

        idx="$(
            vbox_port_list $vm | \
            perl -lne '/(\d+) '$rule'/ && print $1'
        )"
        [[ $idx -eq 0 ]] && let "idx = 1"

        echo -n "Deleting forwarded port from $vm..."
        VBoxManage modifyvm $vm --natpf$idx delete $rule
        echo "done"
    done
}

vbox_port_forward() {
    [[ $# -ge 3 ]] || usage 8

    rule="$1" && shift
    host_port="$1" && shift
    guest_port="$1" && shift

    vms="$@"
    [[ $# -gt 0 ]] || vms="$(vbox_list)"

    for vm in "$vms"; do
        vm_exists $vm || continue
        vm_forwarding_port $vm $rule 2>/dev/null && \
            echo "Rule $rule already exists for $vm" && continue

        num_ports="$(vbox_port_list $vm | wc -l)"
        let "idx = num_ports - 2"
        [[ $idx -gt 0 ]] || let "idx = 1"

        echo -n "Adding forwarded port to $vm..."
        VBoxManage modifyvm $vm --natpf$idx \
            "$rule,tcp,,$host_port,,$guest_port"
        echo "done"
    done
}

vbox_port_list() {
    vms="$@"
    [[ $# -gt 0 ]] || vms="$(vbox_list)"

    for vm in "$vms"; do
        vm_exists $vm || continue

        echo "Fowarded ports for $vm..."
        VBoxManage showvminfo --machinereadable $vm | \
            perl -lne '/Forwarding.(.+).."(.+),.*,.*,(.+),.*,(.+)"/
            && print "$1 $2: Host $3 -> Guest $4"'
        echo "done"
    done
}

vbox_ssh() {
    if [[ $# -lt 1 ]] || [[ $# -gt 3 ]]; then
        usage 9
    fi

    vm="$1"
    username="$USER"
    [[ $# -lt 2 ]] || username="$2"
    unset identity
    [[ $# -lt 3 ]] || identity="-i $3"

    vm_exists $vm || return
    vm_forwarding_port $vm "SSH" || return

    port="$(vbox_port_list $1 | awk '/SSH/ {print $4}')"

    config="$HOME/.ssh/config"
    if [[ -f $config ]] && [[ -n $(\grep "Host $vm" $config) ]]; then
        ssh $vm
    else
        ssh -p $port -l $username $identity localhost
    fi
}

vbox_ssh_config() {
    if [[ $# -lt 1 ]] || [[ $# -gt 3 ]]; then
        usage 10
    fi

    vm="$1"
    username="$USER"
    [[ $# -lt 2 ]] || username="$2"
    unset identity
    [[ $# -lt 3 ]] || identity="-i $3"

    vm_exists $vm || return
    vm_forwarding_port $vm "SSH" || return

    port="$(vbox_port_list $1 | awk '/SSH/ {print $4}')"

    echo "Host $1"
    echo "    Hostname localhost"
    echo "    Port $port"
    echo "    User $username"
    [[ $# -lt 3 ]] || echo "    IdentityFile $3"
}

vbox_snapshot() {
    [[ $# -gt 0 ]] || usage 11

    subaction="$1" && shift

    case "$subaction" in
        "delete") vbox_snapshot_delete $@ ;;
        "list") vbox_snapshot_list $@ ;;
        "restore") vbox_snapshot_restore $@ ;;
        "take") vbox_snapshot_take $@ ;;
        *) usage 12 ;;
    esac
}

vbox_snapshot_delete() {
    [[ $# -ge 1 ]] || usage 13

    snapshot="$1" && shift

    vms="$@"
    [[ $# -gt 0 ]] || vms="$(vbox_list)"

    for vm in "$vms"; do
        vm_snapshot_exists $vm $snapshot || continue

        echo "Deleting $snapshot for $vm..."
        VBoxManage snapshot $vm delete "$snapshot"
        echo "done"
    done
}

vbox_snapshot_list() {
    vms="$@"
    [[ $# -gt 0 ]] || vms="$(vbox_list)"

    for vm in "$vms"; do
        vm_exists $vm || continue

        echo "$vm:"
        VBoxManage snapshot $vm list
    done
}

vbox_snapshot_restore() {
    [[ $# -ge 1 ]] || usage 14

    snapshot="$1" && shift

    vms="$@"
    [[ $# -gt 0 ]] || vms="$(vbox_list)"

    for vm in "$vms"; do
        vm_snapshot_exists $vm $snapshot || continue

        echo "Restoring $snapshot for $vm..."
        VBoxManage snapshot $vm restore "$snapshot"
        echo "done"
    done
}

vbox_snapshot_take() {
    vms="$@"
    [[ $# -gt 0 ]] || vms="$(vbox_list)"

    snapshot="$(date +"%a %b %d" | sed "s| |_|g")"

    for vm in "$vms"; do
        vm_exists $vm || continue
        VBoxManage snapshot $vm take "$snapshot"
    done
}

vbox_status() {
    vms="$@"
    [[ $# -gt 0 ]] || vms="$(vbox_list)"

    for vm in "$vms"; do
        vm_exists $vm || continue

        echo -n "$vm: "
        VBoxManage showvminfo --machinereadable "$vm" | \
            perl -lne '/VMState="(.*)"/ && print $1'
    done
}

vbox_suspend() {
    vms="$@"
    [[ $# -gt 0 ]] || vms="$(vbox_list)"

    for vm in "$vms"; do
        vm_exists $vm || continue

        echo "Saving $vm..."
        VBoxManage controlvm "$vm" savestate
        echo "done"
    done
}

vbox_up() {
    TYPE="headless"
    if [[ $# -gt 0 ]]; then
        case "$1" in
            "detached") TYPE="separate" ;;
            "gui") TYPE="gui" ;;
        esac
        shift
    fi

    vms="$@"
    [[ $# -gt 0 ]] || vms="$(vbox_list)"

    for vm in "$vms"; do
        vm_exists $vm || continue

        echo "Starting $vm..."
        VBoxManage startvm --type $TYPE "$vm"
        echo "done"
    done
}

vm_exists() {
    [[ -z $(vbox_list | \grep -E "^$1$") ]] || return 0
    echo "$1 doesn't exist!" >&2
    return 1
}

vm_forwarding_port() {
    vm_exists $1 || return 1
    [[ -z $(vbox_port_list $1 | \grep -E "[0-9]+ $2:") ]] || return 0
    echo "No port forwarding rule $2 for $1!" >&2
    return 2
}

vm_snapshot_exists() {
    vm_exists $1 || return 1
    if [[ -n $(vbox_snapshot_list $1 | \grep -E "Name: $2 ") ]]; then
        return 0
    fi
    echo "$2 doesn't exist for $1!" >&2
    return 2
}

declare -a args
USER="$(whoami)"

while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-h"|"--help") usage 0 ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ -z ${args[@]} ]] || set -- "${args[@]}"

[[ $# -gt 0 ]] || usage 1
if [[ -z $(command -v VBoxManage) ]]; then
   echo "Virtualbox not installed!"
   exit 2
fi

action="$1" && shift
case "$action" in
    "destroy") vbox_destroy $@ ;;
    "halt") vbox_halt $@ ;;
    "help") usage 0 ;;
    "list") vbox_list ;;
    "port") vbox_port $@ ;;
    "ssh") vbox_ssh $@ ;;
    "ssh-config") vbox_ssh_config $@ ;;
    "snapshot") vbox_snapshot $@ ;;
    "status") vbox_status $@ ;;
    "suspend") vbox_suspend $@ ;;
    "up") vbox_up $@ ;;
    *) usage 3 ;;
esac
