#!/usr/bin/env bash
# A script that is similar to rvm but for Go.
# by Miles Whittaker <mj@whitta.dev>
#
# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2020 Miles Whittaker
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

### Helpers begin
check_deps() {
    local missing
    for d in "${deps[@]}"; do
        if [[ -z $(command -v "$d") ]]; then
            # Force absolute path
            if [[ ! -e "/$d" ]]; then
                err "$d was not found"
                missing="true"
            fi
        fi
    done; unset d
    [[ -z $missing ]] || exit 128
}
err() { echo -e "${color:+\e[31m}[!] $*\e[0m"; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*\e[0m"; }
info() { echo -e "${color:+\e[37m}[*] $*\e[0m"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || return 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || return 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*\e[0m"; }
warn() { echo -e "${color:+\e[33m}[-] $*\e[0m"; }
### Helpers end

godel() {
    local use="$(
        stat "$cache/use" 2>/dev/null | \
        grep -ioPs "\-\>\s+.*\Kv[0-9.]+"
    )"

    rm -rf "$cache/v$1"

    if [[ "v$1" == "$use" ]]; then
        rm -f "$cache/use"
        gofallback
    fi

    # Test new symlinked version
    [[ -z $(command -v go) ]] || good "$(go version)"
    [[ -n $(command -v go) ]] || err "go: command not found"
}

gofallback() {
    local version

    mkdir -p "$cache"

    # Fallback to system version
    if [[ ! -e "$cache/use" ]]; then
        while read -r version; do
            ln -s "$version" "$cache/use"
            return
        done < <(
            find "$cache" -maxdepth 1 -mindepth 1 -type d -name "v*" \
            -exec basename {} \; | \
            sort -k 1,1nr -k 2,2nr -k 3,3nr -t "."
        ); unset version

        if [[ -d /usr/lib/go ]]; then
            ln -s /usr/lib/go "$cache/use"
            return
        elif [[ -d /usr/local/Cellar/go ]]; then
            while read -r version; do
                ln -s "/usr/local/Cellar/go/$version/libexec" \
                    "$cache/use"
                return
            done < <(
                find /usr/local/Cellar/go -maxdepth 1 -mindepth 1 \
                    -type d -exec basename {} \; | \
                sort -k 1,1nr -k 2,2nr -k 3,3nr -t "."
            ); unset version
        fi
    fi
}

goget() {
    local tgz="$(
        curl -Ls "$gourl" | \
        grep -ioPs "dl/\Kgo$1\.$os-$arch\.tar\.gz" | sort -u
    )"

    [[ -n $tgz ]] || errx 3 "Version $1 not found"

    curl -kLo "$cache/$tgz" -s "$gourl/$tgz"
    [[ $? -eq 0 ]] || errx 4 "Failed to download tarball"

    if [[ ! -d "$cache/v$1" ]]; then
        tar -C "$cache" -f "$cache/$tgz" -xz
        [[ $? -eq 0 ]] || errx 5 "Failed to extract tarball"

        mv "$cache/go" "$cache/v$1"
    fi

    # Define fallback values so "rm -rf /" doesn't happen
    rm -rf "${cache:-/tmp}/${tgz:-asdf}"
}

gols() {
    local use="$(
        stat "$cache/use" 2>/dev/null | \
        grep -ioPs "\-\>\s+.*\Kv[0-9.]+"
    )"
    local version

    while read -r version; do
        if [[ "$version" == "$use" ]]; then
            info "$version"
        else
            good "$version"
        fi
    done < <(
        find "$cache" -maxdepth 1 -mindepth 1 -type d -name "v*" \
        -exec basename {} \; | \
        sort -k 1,1nr -k 2,2nr -k 3,3nr -t "." -u
    ); unset version
}

gosearch() {
    local version

    while read -r version; do
        good "v$version"
    done < <(
        curl -Ls "$gourl" | \
        grep -ioPs "dl/go\K($1.*?)(?=\.$os-$arch\.tar\.gz)" | \
        sort -k 1,1nr -k 2,2nr -k 3,3nr -t "." -u
    ); unset version
}

gouse() {
    local use="$(
        find "$cache" -maxdepth 1 -mindepth 1 -type d -name "v$1"
    )"

    # Download version if needed
    [[ -n $use ]] || goget "$1"

    # Symlink new version
    if [[ -d "$cache/v$1" ]]; then
        rm -f "$cache/use"
        ln -s "v$1" "$cache/use"
    fi

    # Test symlinked version
    [[ -z $(command -v go) ]] || good "$(go version)"
    [[ -n $(command -v go) ]] || err "go: command not found"
}

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS]

This script is similar to rvm, but for Go. You will need to add
something like the following 2 lines to your ~/.bashrc and then source
it:

    export GOROOT="\$HOME/.cache/gvm/use"
    export PATH="\$GOROOT/bin\${PATH:+:\$PATH}"

Options:
    -c, --clear            Clear the cached versions of Go
    -d, --delete=STRING    Delete the specified version
    -h, --help             Display this help message
    -l, --list             Show cached versions (default)
    --no-color             Disable colorized output
    -s, --search=STRING    Search for versions starting with STRING
    -u, --use=STRING       Use specified version

EOF
    exit "$1"
}

declare -a args deps
unset help vers
action="list"
cache="$HOME/.cache/gvm"
color="true"
deps+=("curl")
deps+=("find")
deps+=("grep")
deps+=("ln")
deps+=("sort")
deps+=("stat")
deps+=("tar")
deps+=("tr")
deps+=("uname")
gourl="https://golang.org/dl"

# Check for missing dependencies
check_deps

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift; args+=("$@"); break ;;
        "-c"|"--clear") action="clear" ;;
        "-d"|"--delete"*)
            action="delete"
            vers="$(long_opt "$@")"
            ;;
        "-h"|"--help") help="true" ;;
        "-l"|"--list") action="list" ;;
        "--no-color") unset color ;;
        "-s"|"--search"*)
            action="search"
            vers="$(long_opt "$@")"
            ;;
        "-u"|"--use"*)
            action="use"
            vers="$(long_opt "$@")"
            ;;
        *) args+=("$1") ;;
    esac
    case "$?" in
        0) ;;
        1) shift ;;
        *) usage $? ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

gofallback

# Check for valid params
[[ -z $help ]] || usage 0

# Get system metadata
case "$(uname -m)" in
    "x86_64") arch="amd64" ;;
    *) errx 1 "Unsupported architecture $(uname -m)" ;;
esac
case "$(uname -s | tr "[:upper:]" "[:lower:]")" in
    "darwin") os="darwin" ;;
    "freebsd") os="freebsd" ;;
    "linux") os="linux" ;;
    *) errx 2 "Unsupported OS $(uname -s)" ;;
esac

# Normalize version
[[ -z $vers ]] || vers="${vers#v}"

case "$action" in
    "clear") rm -rf "$cache" ;;
    "delete") godel "$vers" ;;
    "list") gols ;;
    "search") gosearch "$vers" ;;
    "use") gouse "$vers" ;;
esac

gofallback
