#!/usr/bin/env ruby
# A script to encrypt/decrypt using the Caesar Cipher.
# by Miles Whittaker <mj@whitta.dev>
#
# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2020 Miles Whittaker
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

require "io/wait"
require "optparse"
require "pathname"

class Exit
    GOOD = 0
    INVALID_OPTION = 1
    INVALID_ARGUMENT = 2
    MISSING_ARGUMENT = 3
    EXTRA_ARGUMENTS = 4
    EXCEPTION = 5
    AMBIGUOUS_ARGUMENT = 6
end

def decrement_by(key, char, nums)
    total = 26
    total += 10 if (nums)
    return increment_by(total - key, char, nums)
end

def increment_by(key, char, nums)
    key.times do
        case char
        when /[0-8]/
            if (nums)
                char.next!
            end
        when "9"
            if (nums)
                char = "a"
            end
        when /[A-Ya-y]/
            char.next!
        when "Z"
            if (nums)
                char = "0"
            else
                char = "A"
            end
        when "z"
            if (nums)
                char = "0"
            else
                char = "a"
            end
        end
    end
    return char
end

def parse(args)
    options = Hash.new
    options["action"] = "encrypt"
    options["numbers"] = false
    options["verbose"] = false

    info = "Encrypt or decrypte using Caesar Cipher."

    parser = OptionParser.new do |opts|
        opts.summary_width = 16

        opts.banner =
            "Usage: #{File.basename($0)} [OPTIONS] <key> <file>"

        opts.on("")

        info.scan(/\S.{0,80}\S(?=\s|$)|\S+/).each do |line|
            opts.on("#{line}")
        end

        opts.on("", "OPTIONS")

        opts.on("-d", "--decrypt", "Decrypt ciphertext") do
            options["action"] = "decrypt"
        end

        opts.on("-e", "--encrypt", "Encrypt plaintext (default)") do
            options["action"] = "encrypt"
        end

        opts.on("-h", "--help", "Display this help message") do
            puts opts
            exit Exit::GOOD
        end

        opts.on("-n", "--numbers", "Key space includes numbers") do
            options["numbers"] = true
        end

        opts.on(
            "-v",
            "--verbose",
            "Show backtrace when error occurs"
        ) do
            options["verbose"] = true
        end
    end

    begin
        parser.parse!(args)
    rescue OptionParser::InvalidOption => e
        puts e.message
        puts parser
        exit Exit::INVALID_OPTION
    rescue OptionParser::InvalidArgument => e
        puts e.message
        puts parser
        exit Exit::INVALID_ARGUMENT
    rescue OptionParser::MissingArgument => e
        puts e.message
        puts parser
        exit Exit::MISSING_ARGUMENT
    rescue OptionParser::AmbiguousOption => e
        puts e.message
        puts parser
        exit Exit::AMBIGUOUS_ARGUMENT
    end

    if (args.empty?)
        puts parser
        exit Exit::MISSING_ARGUMENT
    elsif (args.length != 2)
        puts parser
        exit Exit::EXTRA_ARGUMENTS
    end

    options["key"] = args[0].to_i
    options["file"] = args[1]

    return options
end

def process(filename, options)
    action = options["action"]
    key = options["key"]
    nums = options["numbers"]
    File.open(filename, "r") do |f|
        f.readlines.each do |line|
            line.chomp!
            line.chars.each do |char|
                case char
                when /[A-Z]/
                    case action
                    when "decrypt"
                        print decrement_by(key, char, nums).upcase
                    when "encrypt"
                        print increment_by(key, char, nums).upcase
                    end
                when /[a-z]/
                    case action
                    when "decrypt"
                        print decrement_by(key, char, nums).downcase
                    when "encrypt"
                        print increment_by(key, char, nums).downcase
                    end
                when /[0-9]/
                    if (nums)
                        case action
                        when "decrypt"
                            print decrement_by(key, char, nums)
                        when "encrypt"
                            print increment_by(key, char, nums)
                        end
                    else
                        print char
                    end
                else
                    print char
                end
            end
            puts
        end
    end
end

begin
    options = parse(ARGV)
rescue Interrupt
    # Exit gracefully on ^C
    exit Exit::GOOD
end

begin
    filename = Pathname.new(options["file"]).expand_path
    if (filename.exist?)
        process(filename, options)
    else
        puts "#{options["file"]} does not exist"
    end
rescue Interrupt
    # Exit gracefully on ^C
rescue Errno::EPIPE
    # Do nothing. This can happen if piping to another program such as
    # less. Usually if less is closed before we're done with STDOUT.
rescue Exception => e
    $stderr.puts [
        "Oops! Looks like an error has occurred! Maybe the message",
        "below will help. If not,"
    ].join(" ")
    $stderr.puts "you can use the --verbose flag to get a backtrace."
    $stderr.puts

    $stderr.puts e.message
    if (options["verbose"])
        e.backtrace.each do |line|
            $stderr.puts line
        end
    end
    exit Exit::EXCEPTION
end
exit Exit::GOOD
