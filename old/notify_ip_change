#!/usr/bin/env bash
# A script to notify by email when IP changes.
# by Miles Whittaker <mjwhitta@gmail.com>
#
# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2018 Miles Whittaker
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

compare_and_notify() {
    file_new="$1"
    file_old="$2"
    if [[ -n $(diff $file_new $file_old) ]]; then
        cp $file_new $file_old
        message="IP address changed to $(cat $file_new)"
        info "$message"
        if [[ -n $email ]]; then
            echo "$message" | mutt -s "New IP address" "$email"
        fi
    fi
}

err() { echo -e "${color:+\e[31m}[!] $@\e[0m"; }

errx() { echo -e "${color:+\e[31m}[!] ${@:2}\e[0m"; exit $1; }

good() { echo -e "${color:+\e[32m}[+] $@\e[0m"; }

info() { echo -e "${color:+\e[37m}[*] $@\e[0m"; }

long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 1 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || usage 1; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}

unique_tmp_file() {
    echo "/tmp/ip_$(head -c 8 /dev/urandom | xxd -p)"
}

usage() {
    echo "Usage: ${0/*\//} [OPTIONS]"
    echo
    echo "Detect when IP changes and notify user"
    echo
    echo "Options:"
    echo "    -e, --email=EMAIL    Notify specified email address"
    echo "    -f, --file=FILE      Compare to IP in specified file"
    echo "    -h, --helpo          Display this help message"
    echo "    -i, --ip=IP          Compare to specified IP"
    echo "    --nocolor            Disable colorized output"
    echo
    exit $1
}

warn() { echo -e "${color:+\e[33m}[-] $@\e[0m"; }

declare -a args
unset email file help ip
color="true"

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-e"|"--email"*) email="$(long_opt $@)" || shift ;;
        "-f"|"--file"*) file="$(long_opt $@)" || shift ;;
        "-h"|"--help") help="true" ;;
        "-i"|"--ip"*) ip="$(long_opt $@)" || shift ;;
        "--nocolor") unset color ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ -z ${args[@]} ]] || set -- "${args[@]}"

# Check for valid params and missing dependencies
[[ -z $help ]] || usage 0
[[ $# -eq 0 ]] || usage 2
[[ -n $file ]] || [[ -n $ip ]] || usage 3
[[ -z $file ]] || [[ -f $file ]] || usage 4
[[ -z $(ip -o a | grep "tun") ]] || usage 5

tmp_file="$(unique_tmp_file)"

new_ip="$(curl --connect-timeout 7 -kL -m 7 -s https://icanhazip.com)"
[[ -n $new_ip ]] || errx 5 "Curl timed-out"

echo "$new_ip" >$tmp_file

if [[ -n $file ]]; then
    compare_and_notify $tmp_file $file
elif [[ -n $ip ]]; then
    cmp_file="$(unique_tmp_file)"
    echo "$ip" >$cmp_file
    compare_and_notify $tmp_file $cmp_file
    rm -f $cmp_file
fi

rm -f $tmp_file
