#!/usr/bin/env bash
# A script gathering info about a GitHub site.
# by Miles Whittaker <mj@whitta.dev>
#
# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2020 Miles Whittaker
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

### Helpers begin
check_deps() {
    local missing
    for d in "${deps[@]}"; do
        if [[ -z $(command -v "$d") ]]; then
            # Force absolute path
            if [[ ! -e "/$d" ]]; then
                err "$d was not found"
                missing="true"
            fi
        fi
    done; unset d
    [[ -z $missing ]] || exit 128
}
err() { echo -e "${color:+\e[31m}[!] $*\e[0m"; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*\e[0m"; }
info() { echo -e "${color:+\e[37m}[*] $*\e[0m"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || return 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || return 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*\e[0m"; }
warn() { echo -e "${color:+\e[33m}[-] $*\e[0m"; }
### Helpers end

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS] github_url

DESCRIPTION
    This tool will gather a list of gists/repo from GitHub.

    To get a TOKEN, go to the settings page of your GitHub account.
    Click "Applications" and generate a personal access token.

OPTIONS
    -a, --access=TOKEN    Use the specified access token
    -h, --help            Display this help message
    --no-color            Disable colorized output
    -o, --output=FILE     Output to specified file
    -s, --socks=SOCKS     Use the specified socks5 proxy

EOF
    exit "$1"
}

declare -a args
unset help output socks token
color="true"

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift; args+=("$@"); break ;;
        "-a"|"--access"*) token="&access_token=$(long_opt "$@")" ;;
        "-h"|"--help") help="true" ;;
        "--no-color") unset color ;;
        "-o"|"--output"*) output="$(long_opt "$@")" ;;
        "-s"|"--socks"*) socks="--socks5 $(long_opt "$@")" ;;
        *) args+=("$1") ;;
    esac
    case "$?" in
        0) ;;
        1) shift ;;
        *) usage $? ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Help info
[[ -z $help ]] || usage 0

# Check for missing dependencies
declare -a deps
deps+=("curl")
deps+=("jq")
check_deps

# Check for valid params
[[ $# -le 1 ]] || usage 1

github="https://api.github.com"
[[ $# -eq 0 ]] || github="$1"

# shellcheck disable=SC2089
curl="curl -H \"Accept: application/vnd.github.v3+json\" -kLs $socks"
jq="jq -c -M -r -S"
more="1"
since="0"

while [[ $more -eq 1 ]]; do
    more="0"

    while read -r username; do
        [[ -n $username ]] || continue

        more="1"
        url="$github/users/$username"

        # Get all gists and repos
        for i in gists repos; do
            more="2"
            page="1"

            while [[ $more -eq 2 ]]; do
                more="1"

                while read -r item; do
                    [[ -n $item ]] || continue

                    more="2"

                    echo "$item"
                done < <(
                    # shellcheck disable=SC2090
                    $curl "$url/$i?page=$page&per_page=100$token" | \
                    $jq ".[].html_url" 2>/dev/null
                ); unset item

                ((page+=1))
            done; unset page
        done; unset i
    done < <(
        # shellcheck disable=SC2090
        $curl "$github/users?per_page=100&since=$since$token" | \
        $jq ".[].login" 2>/dev/null | sort -u
    ) | tee "$output"; unset username

    ((since+=100))
done
