#!/usr/bin/env bash

### Helpers begin
check_deps() {
    local missing
    for d in "${deps[@]}"; do
        if [[ -z $(command -v "$d") ]]; then
            # Force absolute path
            if [[ ! -e "/$d" ]]; then
                err "$d was not found"
                missing="true"
            fi
        fi
    done; unset d
    [[ -z $missing ]] || exit 128
}
err() { echo -e "${color:+\e[31m}[!] $*${color:+\e[0m}" >&2; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*${color:+\e[0m}"; }
info() { echo -e "${color:+\e[37m}[*] $*${color:+\e[0m}"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || return 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || return 127; arg="$1" ;;
    esac
    echo "$arg"
    return "$shift"
}
subinfo() { echo -e "${color:+\e[36m}[=] $*${color:+\e[0m}"; }
warn() { echo -e "${color:+\e[33m}[-] $*${color:+\e[0m}"; }
### Helpers end

extract_ciphers() {
    local line

    while read -r line; do
        if [[ "$line" =~ ([^, ]+),\ Cipher\ is\ (.+) ]]; then
            case "${BASH_REMATCH[0]}" in
                *"NONE"*) continue ;;
            esac

            echo "${BASH_REMATCH[1]} ${BASH_REMATCH[2]}"
        fi
    done < <(test_ciphers "$1"); unset line
}

test_ciphers() {
    local c

    while read -r c; do
        openssl s_client -cipher "$c" -connect "$1:$port" -tls1 2>&1 \
            <<<""
    done < <(openssl ciphers "ALL:eNULL" | sed "s/:/\n/g")
    unset c

    while read -r c; do
        openssl s_client -cipher "$c" -connect "$1:$port" -tls1_1 \
            2>&1 <<<""
    done < <(openssl ciphers "ALL:eNULL" | sed "s/:/\n/g")
    unset c

    while read -r c; do
        openssl s_client -cipher "$c" -connect "$1:$port" -tls1_2 \
            2>&1 <<<""
    done < <(openssl ciphers "ALL:eNULL" | sed "s/:/\n/g")
    unset c

    while read -r c; do
        openssl s_client -ciphersuites "$c" -connect "$1:$port" \
            -tls1_3 2>&1 <<<""
    done < <(openssl ciphers "ALL:eNULL" | sed "s/:/\n/g")
    unset c
}

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS] <host>

DESCRIPTION
    Check which ciphers a TLS server supports.

OPTIONS
    -h, --help        Display this help message
        --no-color    Disable colorized output
    -p, --port=INT    Specify port to test (default: 443)

EOF
    exit "$1"
}

declare -a args
unset help
color="true"
port="443"

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift; args+=("$@"); break ;;
        "-h"|"--help") help="true" ;;
        "--no-color") unset color ;;
        "-p"|"--port"*) port="$(long_opt "$@")" ;;
        *) args+=("$1") ;;
    esac
    case "$?" in
        0) ;;
        1) shift ;;
        *) usage "$?" ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Help info
[[ -z $help ]] || usage 0

# Check for missing dependencies
declare -a deps
deps+=("openssl")
deps+=("sort")
check_deps

# Check for valid params
[[ $# -eq 1 ]] || usage 1

while read -r cipher; do
    good "$cipher"
done < <(extract_ciphers "$1" | sort -u); unset cipher
