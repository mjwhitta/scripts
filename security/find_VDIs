#!/usr/bin/env bash

set -o noglob

clean() {
    [[ ${1:-0} -ne 0 ]] || [[ ! -d $cache ]] || rm -rf $cache
    [[ -z $script ]] || [[ ! -f $script ]] || rm -f $script
    exit ${1:-0}
}

err() { echo -e "${color:+\e[31m}[!] $@\e[0m"; }

errx() { echo -e "${color:+\e[31m}[!] ${@:2}\e[0m"; clean $1; }

good() { echo -e "${color:+\e[32m}[+] $@\e[0m"; }

info() { echo -e "${color:+\e[37m}[*] $@\e[0m"; }

json_get() {
    [[ -z $json ]] || jq -cr ".$@" $json | sed -r "s/^null$//g"
}

long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 1 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || usage 1; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}

read_resume_file() {
    debug="$(json_get "debug")"
    index="$(json_get "index")"
    timeout="$(json_get "timeout")"
    web="$(json_get "web")"
}

subinfo() { echo -e "${color:+\e[36m}[=] $@\e[0m"; }

usage() {
    echo "Usage: ${0##*/} [OPTIONS] <file1>... [fileN]"
    echo
    echo "Find valid VDI endpoints"
    echo
    echo "Options:"
    echo "    -d, --debug          Keep log files for debugging"
    echo "    -h, --help           Display this help message"
    echo "    --nocolor            Disable colorized output"
    echo "    -o, --output=FILE    Write output to a file"
    echo "    -r, --resume         Resume from a previous run"
    echo "    -t, --threads=NUM    Use the specied number of threads"
    echo "                         (default: $threads)"
    echo "    --timeout=SECS       Timeout (default: $timeout)"
    echo "    -v, --verbose        Do not hide parallel errors"
    echo "    -w, --web            Scrape web instead of trying to"
    echo "                         connect"
    echo
    exit $1
}

warn() { echo -e "${color:+\e[33m}[-] $@\e[0m"; }

write_resume_file() {
    cat >$json <<EOF
{
  "debug": "$debug",
  "index": "$index",
  "timeout": "$timeout",
  "web": "$web"
}
EOF
}

declare -a args
unset debug help output web
cache="${0##*/}.resume"
color="true"
index="portal/webclient/index.html"
joblog="$cache/joblog.txt"
json="$cache/${0##*/}.json"
parallel="true"
threads="32"
timeout="2"

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-d"|"--debug") debug="true" ;;
        "-h"|"--help") help="true" ;;
        "--nocolor") unset color ;;
        "-o"|"--output"*) output="$(long_opt "$@")" || shift ;;
        "-r"|"--resume") resume="--resume" ;;
        "-t"|"--threads"*) threads="$(long_opt "$@")" || shift ;;
        "--timeout"*) timeout="$(long_opt "$@")" || shift ;;
        "-v"|"--verbose") verbose="true" ;;
        "-w"|"--web") web="true" ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ -z ${args[@]} ]] || set -- "${args[@]}"

# Check for valid params and missing dependencies
[[ -z $help ]] || usage 0
[[ $# -gt 0 ]] || usage 2
for dep in curl nslookup vmware-view; do
    [[ -n $(command -v $dep) ]] || errx 3 "$dep is not installed"
done; unset dep

# Determine parallel situation
if [[ -n $parallel ]] && [[ -z $(command -v parallel) ]]; then
    warn "Parallel is not installed, defaulting to single-threaded"
    unset parallel
fi

# Cite if needed
if [[ -n $parallel ]] && [[ ! -f $HOME/.parallel/will-cite ]]; then
    mkdir -p $HOME/.parallel
    parallel --citation
fi

if [[ -n $parallel ]]; then
    # Ensure resume directory exists
    mkdir -p $cache

    # Check for resume file
    if [[ -f $json ]] && [[ -z $resume ]]; then
        warn "Resume file found" >&2
        while :; do
            # Prompt whether to overwrite or resume
            read -n 1 -p "Would you like to resume [y/n/q]: " -s ans
            echo

            case "$ans" in
                "n") write_resume_file; break ;;
                "q") exit 0 ;;
                "y") read_resume_file; resume="--resume"; break ;;
                *) echo "Invalid response, try again!" ;;
            esac
        done
    elif [[ -f $json ]]; then
        read_resume_file
    elif [[ -n $resume ]]; then
        errx 6 "No resume file found in current directory"
    else
        write_resume_file
    fi
fi

# Dataset used by parallel
dataset="$cache/${0##*/}.dataset"

# Script used by parallel
script="/tmp/${0##*/}.parallel"

# Ensure cleanup on ^C
trap "clean -1" SIGINT

# Process dataset
info "Processing dataset for jobs"

if [[ ! -f $dataset ]]; then
    total="0"
    while read -r data; do
        ((total += 1))
        echo "$data" >>$dataset
    done < <(cat $@ 2>/dev/null | sort -u); unset data
else
    total="$(cat $dataset | wc -l)"
fi
[[ $total -gt 0 ]] || errx 0 "No dataset provided"

info "$total jobs to run"

# Create sub-script
cat >$script <<EOF
#!/usr/bin/env bash

set -o noglob

check_vmware_viewer() {
    local log="\$(
        timeout $timeout vmware-view -q -s \$1 2>&1 | \
        awk '{print \$NF}'
    )"
    if [[ "x$debug" != "x" ]]; then
        mkdir -p logs
        sed -r "s/[^|]+\| //" \$log >logs/\$1.log
    fi
    case "\$(connection_status \$log)" in
        "fail") ;;
        "hung"|"success") name_lookup "\$1" ;;
        *) warn "Unknown - Look at logs for \$1" >&2 ;;
    esac
}

check_web() {
    local found="\$(
        curl --connect-timeout $timeout -kL --max-time $timeout -s \
        "https://\$1/$index" | grep -i -m 1 "vmware horizon"
    )"
    [[ -z \$found ]] || name_lookup "\$1"
}

connection_status() {
    if [[ -n \$(grep -o "FAIL" \$1) ]]; then
        echo "fail"
    elif [[ -z \$(grep -o "response" \$1) ]]; then
        echo "hung"
    elif [[ -n \$(grep -o "ParseResult" \$1) ]]; then
        echo "success"
    else
        echo "unknown"
    fi
}

err() { echo -e "\r${color:+\e[31m}[!] \$@\e[0m\e[K"; }

errx() { echo -e "\r${color:+\e[31m}[!] \${@:2}\e[0m\e[K"; exit \$1; }

good() { echo -e "\r${color:+\e[32m}[+] \$@\e[0m\e[K"; }

info() { echo -e "\r${color:+\e[37m}[*] \$@\e[0m\e[K"; }

name_lookup() {
    local -a names=(\$(nslookup \$1 | awk '/name/ {print \$NF}'))
    for name in "\${names[@]}"; do
        good "\${name%.}    \$1"
    done; unset name
}

subinfo() { echo -e "\r${color:+\e[36m}[=] \$@\e[0m\e[K"; }

warn() { echo -e "\r${color:+\e[33m}[-] \$@\e[0m\e[K"; }

if [[ "x$web" != "x" ]]; then
    check_web \$1
else
    check_vmware_viewer \$1
fi
EOF
chmod 700 $script

# Run sub-script
if [[ -n $parallel ]]; then
    parallel -a $dataset --bar --joblog ${resume:++}$joblog --lb \
        -P $threads -r $resume $script {} | tee -a $output
    [[ -n $verbose ]] || echo -en "\e[1A\e[K" >&2
else
    count="1"
    while read -r data; do
        echo -e "\r\e[K" >&2
        echo -en "${color:+\e[37m}[$count/$total]\e[0m\e[K\e[1A" >&2
        $script "$data"
        ((count += 1))
    done <$dataset | tee -a $output; unset data
fi

clean
