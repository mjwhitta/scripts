#!/usr/bin/env bash

clean() { [[ -z $script ]] || rm -f $script; exit $1; }

err() { echo -e "${color:+\e[31m}[!] $@\e[0m"; }

errx() { echo -e "${color:+\e[31m}[!] ${@:2}\e[0m"; clean $1; }

good() { echo -e "${color:+\e[32m}[+] $@\e[0m"; }

info() { echo -e "${color:+\e[37m}[*] $@\e[0m"; }

long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 1 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || usage 1; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}

usage() {
    echo "Usage: ${0/*\//} [OPTIONS] <file1>... [fileN]"
    echo
    echo "Find valid VDI endpoints"
    echo
    echo "Options:"
    echo "    -d, --debug           Keep log files for debugging"
    echo "    -h, --help            Display this help message"
    echo "    --nocolor             Disable colorized output"
    echo "    -o, --output=FILE     Write output to a file"
    local default="(default: $threads)"
    echo "        --threads=NUM     Use the specied number of threads"
    echo "                          if running in parallel $default"
    echo "    -t, --timeout=SECS    Timeout (default: $timeout)"
    echo "    -w, --web             Scrape web instead of trying to"
    echo "                          connect"
    echo
    exit $1
}

warn() { echo -e "${color:+\e[33m}[-] $@\e[0m"; }

declare -a args
unset debug help output web
color="true"
index="portal/webclient/index.html"
parallel="true"
threads="32"
timeout="2"

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-d"|"--debug") debug="true" ;;
        "-h"|"--help") help="true" ;;
        "--nocolor") unset color ;;
        "-o"|"--output"*) output="$(long_opt $@)" || shift ;;
        "--threads"*) threads="$(long_opt $@)" || shift ;;
        "-t"|"--timeout"*) timeout="$(long_opt $@)" || shift ;;
        "-w"|"--web") web="true" ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ -z ${args[@]} ]] || set -- "${args[@]}"

# Check for valid params and missing dependencies
[[ -z $help ]] || usage 0
[[ $# -gt 0 ]] || usage 2
for dep in curl nslookup vmware-view; do
    [[ -n $(command -v $dep) ]] || errx 3 "$dep is not installed"
done; unset dep

# Determine parallel situation
if [[ -n $parallel ]] && [[ -z $(command -v parallel) ]]; then
    warn "Parallel is not installed, defaulting to single-threaded"
    unset parallel
fi

# Cite if needed
if [[ -n $parallel ]] && [[ ! -f $HOME/.parallel/will-cite ]]; then
    mkdir -p $HOME/.parallel
    parallel --citation
fi

# Script used by parallel
script="/tmp/${0/*\//}.parallel"
trap clean SIGINT

cat >$script <<EOF
#!/usr/bin/env bash

check_vmware_viewer() {
    local log="\$(
        timeout $timeout vmware-view -q -s \$1 2>&1 | \
        awk '{print \$NF}'
    )"
    if [[ "x$debug" != "x" ]]; then
        mkdir -p logs
        sed -r "s/[^|]+\| //" \$log >logs/\$1.log
    fi
    case "\$(connection_status \$log)" in
        "fail") ;;
        "hung"|"success") name_lookup "\$1" ;;
        *) warn "Unknown - Look at logs for \$1" >&2 ;;
    esac
}

check_web() {
    local found="\$(
        curl --connect-timeout $timeout -kL --max-time $timeout -s \
        "https://\$1/$index" | grep -i -m 1 "vmware horizon"
    )"
    [[ -z \$found ]] || name_lookup "\$1"
}

connection_status() {
    if [[ -n \$(grep -o "FAIL" \$1) ]]; then
        echo "fail"
    elif [[ -z \$(grep -o "response" \$1) ]]; then
        echo "hung"
    elif [[ -n \$(grep -o "ParseResult" \$1) ]]; then
        echo "success"
    else
        echo "unknown"
    fi
}

err() { echo -e "\r${color:+\e[31m}[!] \$@\e[0m\e[K"; }

errx() { echo -e "\r${color:+\e[31m}[!] \${@:2}\e[0m\e[K"; exit \$1; }

good() { echo -e "\r${color:+\e[32m}[+] \$@\e[0m\e[K"; }

info() { echo -e "\r${color:+\e[37m}[*] \$@\e[0m\e[K"; }

name_lookup() {
    local -a names=(\$(nslookup \$1 | awk '/name/ {print \$NF}'))
    for name in "\${names[@]}"; do
        good "\${name%.}    \$1"
    done; unset name
}

warn() { echo -e "\r${color:+\e[33m}[-] \$@\e[0m\e[K"; }

if [[ "x$web" != "x" ]]; then
    check_web \$1
else
    check_vmware_viewer \$1
fi
EOF
chmod 700 $script

info "Processing dataset for jobs"

declare -a dataset=($(cat $@ 2>/dev/null))
let "total = ${#dataset[@]}"

[[ $total -ne 0 ]] || errx 4 "No dataset provided"

info "$total jobs to run"
if [[ -n $parallel ]]; then
    # Math
    left="$total"
    marker="0"
    maxdata="$(
        parallel -r --show-limit </dev/null | \
        awk '/Maximal used/ {print $NF; exit}'
    )"
    let "remainder = total % maxdata"
    round="0"
    let "rounds = total / maxdata"
    [[ $remainder -eq 0 ]] || let "rounds += 1"

    # Loop thru rounds
    [[ $rounds -eq 1 ]] || info "Splitting into $rounds rounds"
    while [[ $left -gt 0 ]]; do
        let "round += 1"
        [[ $rounds -eq 1 ]] || warn "Round $round"

        increment="$left"
        [[ $left -le $maxdata ]] || increment="$maxdata"

        parallel --bar --lb -P $threads -r $script {} ::: \
            ${dataset[@]:$marker:$increment} | tee -a $output

        let "left -= increment"
        let "marker += increment"
        echo -en "\e[1A\e[K"
    done
else
    let "count = 1"
    for data in "${dataset[@]}"; do
        echo -e "\r\e[K" >&2
        echo -en "${color:+\e[37m}[$count/$total]\e[0m\e[K\e[1A" >&2
        $script "$data"
        let "count += 1"
    done | tee -a $output; unset data
fi

clean
