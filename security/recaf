#!/usr/bin/env bash

### Helpers begin
check_deps() {
    local missing
    for d in "${deps[@]}"; do
        if [[ -z $(command -v "$d") ]]; then
            # Force absolute path
            if [[ ! -e "/$d" ]]; then
                err "$d was not found"
                missing="true"
            fi
        fi
    done; unset d
    [[ -z $missing ]] || exit 128
}
err() { echo -e "${color:+\e[31m}[!] $*${color:+\e[0m}" >&2; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*${color:+\e[0m}"; }
info() { echo -e "${color:+\e[37m}[*] $*${color:+\e[0m}"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || return 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || return 127; arg="$1" ;;
    esac
    echo "$arg"
    return "$shift"
}
subinfo() { echo -e "${color:+\e[36m}[=] $*${color:+\e[0m}"; }
warn() { echo -e "${color:+\e[33m}[-] $*${color:+\e[0m}"; }
### Helpers end

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS] [args]

DESCRIPTION
    Launch Recaf.

OPTIONS
    -c, --clear    Clear cache and download the newest Recaf
    -h, --help     Display this help message
    --no-color     Disable colorized output

EOF
    exit "$1"
}

declare -a args
unset clear help
color="true"

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift; args+=("$@"); break ;;
        "-c"|"--clear") clear="true" ;;
        "-h"|"--help") help="true" ;;
        "--no-color") unset color ;;
        *) args+=("$1") ;;
    esac
    case "$?" in
        0) ;;
        1) shift ;;
        *) usage "$?" ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Help info
[[ -z $help ]] || usage 0

# Check for missing dependencies
declare -a deps
deps+=("curl")
deps+=("java")
check_deps

# Check for valid params
# [[ $# -eq 0 ]] || usage 1

cache="$HOME/.cache/recaf"
mkdir -p "$cache"

# Clear cached Recaf if requested
[[ -z $clear ]] || find "$cache" -name "*.jar" -exec rm -f {} +

# Get Recaf if missing
recaf="$(find "$cache" -name "recaf*.jar" | sort -nr | head -n 1)"
if [[ -z $recaf ]]; then
    url="https://github.com"
    path="/Col-E/Recaf/releases"

    assets="$(
        curl -Ls "$url$path" | \
        grep -im 1 -oPs "expanded_assets/\K[^\"]+"
    )"

    jar="$(
        curl -Ls "$url$path/expanded_assets/$assets" | \
        grep -ioPs "href\=.\K.+recaf.+\d+\.\d+\.\d+.+jar.+\.jar" | \
        head -n 1
    )"
    [[ -n $jar ]] || errx 1 "Failed to find recaf jar"

    name="$(basename "$jar")"
    curl -Lo "$cache/$name" "$url$jar" || \
        errx 1 "Failed to download recaf jar"

    recaf="$(find "$cache" -name "recaf*.jar" | sort -nr | head -n 1)"
fi

java -jar "$recaf" "$@"
