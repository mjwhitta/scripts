#!/usr/bin/env bash

### Helpers begin
check_deps() {
    local missing
    for d in "${deps[@]}"; do
        if [[ -z $(command -v "$d") ]]; then
            # Force absolute path
            if [[ ! -e "/$d" ]]; then
                err "$d was not found"
                missing="true"
            fi
        fi
    done; unset d
    [[ -z $missing ]] || exit 128
}
err() { echo -e "${color:+\e[31m}[!] $*${color:+\e[0m}" >&2; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*${color:+\e[0m}"; }
info() { echo -e "${color:+\e[37m}[*] $*${color:+\e[0m}"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || return 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || return 127; arg="$1" ;;
    esac
    echo "$arg"
    return "$shift"
}
subinfo() { echo -e "${color:+\e[36m}[=] $*${color:+\e[0m}"; }
warn() { echo -e "${color:+\e[33m}[-] $*${color:+\e[0m}"; }
### Helpers end

# Return the candidate files from the writable directories
get_candidates() {
    local candidate

    while read -r candidate; do
        $su lsof | $grep -iPs "\sreg\s.+\s$candidate\/.+" | \
            sort -u | grep -iPsv "del\s+reg\s|(deleted)" | \
            $grep -ioPs "\sreg\s.+\s\K$candidate\/.+"
    done < <(get_writable) | sort -u
}

# Get all parent directories for opened files
get_dirs() {
    local file

    while read -r file; do
        dirname "$file"
    done < <(get_files) | sort -u
}

# List all non-deleted files that are open
get_files() {
    $su lsof | $grep -ioPs "\sreg\s.+\s\K\/.+" | \
        sort -u | grep -iPsv "del\s+reg\s|(deleted)"
}

# Directories must be group-writable or world-writable
get_writable() {
    local dir

    while read -r dir; do
        ls -dhl "$dir" 2>/dev/null
    done < <(get_dirs) | sort -u | \
        grep -ioPs "^d...(.w....|....w.).*\s\K\/.+"
}

# Target file must be root owned for privesc
root_owned() {
    local candidate

    while read -r candidate; do
        $find "$candidate" -user root -print 2>/dev/null
    done < <(get_candidates) | sort -u
}

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS]

DESCRIPTION
    Find potential privilege escalation via symlink abuse.

OPTIONS
    -h, --help        Display this help message
        --no-color    Disable colorized output
    -s, --sudo        Run as root

EOF
    exit "$1"
}

declare -a args
unset help
color="true"

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift; args+=("$@"); break ;;
        "-h"|"--help") help="true" ;;
        "--no-color") unset color ;;
        "-s"|"--sudo") su="sudo" ;;
        *) args+=("$1") ;;
    esac
    case "$?" in
        0) ;;
        1) shift ;;
        *) usage "$?" ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Help info
[[ -z $help ]] || usage 0

# Check for missing dependencies
declare -a deps
deps+=("awk")
case "$(uname -s)" in
    "Darwin")
        deps+=("gfind")
        deps+=("ggrep")
        ;;
    "Linux")
        deps+=("find")
        deps+=("grep")
        ;;
esac
deps+=("lsof")
deps+=("sort")
deps+=("sudo")
check_deps

# Check for valid params
[[ $# -eq 0 ]] || usage 1

case "$(uname -s)" in
    "Darwin") find="gfind"; grep="ggrep" ;;
    "Linux") find="find"; grep="grep" ;;
esac

while read -r candidate; do
    good "$candidate"
    ls -dhl "$(dirname "$candidate")"
    ls -hl "$candidate"
done < <(root_owned)
