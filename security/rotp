#!/usr/bin/env ruby

require "base64"
require "digest/md5"
require "io/console"
require "io/wait"
require "optparse"
require "pathname"

class Action
    DECRYPT = 0
    ENCRYPT = 1
end

class Exit
    GOOD = 0
    INVALID_OPTION = 1
    INVALID_ARGUMENT = 2
    MISSING_ARGUMENT = 3
    EXTRA_ARGUMENTS = 4
    EXCEPTION = 5
    AMBIGUOUS_ARGUMENT = 6
    FILE_DOES_NOT_EXIST = 7
end

def get_passphrase
    $stderr.print "Enter passphrase: "
    passwd = STDIN.noecho(&:gets)
    $stderr.puts
    return passwd.chomp
end

def parse(args)
    options = Hash.new
    options["action"] = Action::ENCRYPT
    options["armor"] = false
    options["passphrase"] = nil
    options["verbose"] = false

    info = [
        "Encrypt or decrypt files using a one-time password",
        "generated from a passphrase."
    ].join(" ")

    parser = OptionParser.new do |opts|
        opts.summary_width = 18

        opts.banner = "Usage: #{File.basename($0)} [OPTIONS] <file>"

        opts.on("")

        info.scan(/\S.{0,80}\S(?=\s|$)|\S+/).each do |line|
            opts.on("#{line}")
        end

        opts.on("", "OPTIONS")

        opts.on("-a", "--armor", "Create ASCII armored output") do
            options["armor"] = true
        end

        opts.on("-d", "--decrypt", "Decrypt file") do
            options["action"] = Action::DECRYPT
        end

        opts.on("-e", "--encrypt", "Encrypt file (default)") do
            options["action"] = Action::ENCRYPT
        end

        opts.on("-h", "--help", "Display this help message") do
            puts opts
            exit Exit::GOOD
        end

        opts.on(
            "-p",
            "--pass=PASS",
            "Use specified passphrase"
        ) do |passwd|
            options["passphrase"] = passwd
        end

        opts.on(
            "-v",
            "--verbose",
            "Show backtrace when error occurs"
        ) do
            options["verbose"] = true
        end
    end

    begin
        parser.parse!(args)
    rescue OptionParser::InvalidOption => e
        puts e.message
        puts parser
        exit Exit::INVALID_OPTION
    rescue OptionParser::InvalidArgument => e
        puts e.message
        puts parser
        exit Exit::INVALID_ARGUMENT
    rescue OptionParser::MissingArgument => e
        puts e.message
        puts parser
        exit Exit::MISSING_ARGUMENT
    rescue OptionParser::AmbiguousOption => e
        puts e.message
        puts parser
        exit Exit::AMBIGUOUS_ARGUMENT
    end

    if (args.empty?)
        puts parser
        exit Exit::MISSING_ARGUMENT
    elsif (args.length > 1)
        puts parser
        exit Exit::EXTRA_ARGUMENTS
    end

    options["file"] = Pathname.new(args[0]).expand_path

    if (!options["file"].exist?)
        puts parser
        exit Exit::FILE_DOES_NOT_EXIST
    end

    return options
end

def process(action, passphrase, file, armor)
    # Open file and initialize some variables
    f = File.open(file, "r")
    processed = Array.new
    timeformat = "%F_%T.%N_%P"

    case action
    when Action::DECRYPT
        if (armor)
            # Read file and strip BEGIN and END lines
            lines = f.readlines
            lines.delete_at(0)
            lines.delete_at(-1)

            # Base64 decode and convert to StringIO
            f = StringIO.open(Base64.decode64(lines.join) + "\n")
        end

        # Bootstrap seed is MD5 of passphrase
        bootstrap_seed = Digest::MD5.hexdigest(passphrase)

        # Determine how large time value is
        timesize = Time.new.strftime(timeformat).length

        # Decrypt initial crypto time using bootstrap seed with PRNG
        r = Random.new(bootstrap_seed.to_i)
        time = xor(f.readpartial(timesize), r.bytes(timesize))
    when Action::ENCRYPT
        # Bootstrap seed is MD5 of passphrase
        bootstrap_seed = Digest::MD5.hexdigest(passphrase)

        # Get current time to create crypto seed
        time = Time.new.strftime(timeformat)

        # Encrypt current time using bootstrap seed with PRNG
        r = Random.new(bootstrap_seed.to_i)
        processed.push(xor(time, r.bytes(time.length)))
    end

    # Crypto seed is MD5 of passphrase XOR'd with current time
    crypto_seed = xor(bootstrap_seed, time)

    # Encrypt/decrypt file contents using crypto seed with PRNG
    r = Random.new(crypto_seed.to_i)
    loop do
        byte = f.readpartial(1)
        break if (f.eof?)
        otp = r.bytes(1)
        processed.push(xor(byte, otp))
    end

    # Close file
    f.close

    # Output processed data
    output = processed.join
    case action
    when Action::ENCRYPT
        if (armor)
            output = [
                "-----BEGIN ROTP MESSAGE-----",
                Base64.encode64(processed.join).chomp,
                "-----END ROTP MESSAGE-----",
            ].join("\n")
        end
    end
    return output
end

def xor(key, data)
    # Ensure key and data are the same length
    key += key while (key.length < data.length)
    key.slice!(data.length..-1) if (key.length > data.length)

    # XOR the key and data
    return key.unpack("C*").zip(data.unpack("C*")).map do |a, b|
        a ^ b
    end.pack("C*")
end

begin
    options = parse(ARGV)
rescue Interrupt
    # Exit gracefully on ^C
    exit Exit::GOOD
end

begin
    processed = process(
        options["action"],
        options["passphrase"] || get_passphrase,
        options["file"],
        options["armor"]
    )
    case options["action"]
    when Action::DECRYPT
        puts processed
    when Action::ENCRYPT
        ext = "rotp"
        ext = "asc" if (options["armor"])
        File.open("#{options["file"]}.#{ext}", "w") do |f|
            f.write(processed)
            f.write("\n")
        end
    end
rescue Interrupt
    # Exit gracefully on ^C
rescue Errno::EPIPE
    # Do nothing. This can happen if piping to another program such as
    # less. Usually if less is closed before we're done with STDOUT.
rescue Exception => e
    $stderr.puts [
        "Oops! Looks like an error has occured! Maybe the message",
        "below will help. If not,"
    ].join(" ")
    $stderr.puts "you can use the --verbose flag to get a backtrace."
    $stderr.puts

    $stderr.puts e.message
    if (options["verbose"])
        e.backtrace.each do |line|
            $stderr.puts line
        end
    end
    exit Exit::EXCEPTION
end
exit Exit::GOOD
