#!/usr/bin/env bash
# A wrapper script for netstat.
# by Miles Whittaker <mj@whitta.dev>
#
# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2020 Miles Whittaker
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

### Helpers begin
check_deps() {
    local missing
    for d in "${deps[@]}"; do
        if [[ -z $(command -v "$d") ]]; then
            # Force absolute path
            if [[ ! -f "/$d" ]]; then
                err "$d was not found"
                missing="true"
            fi
        fi
    done; unset d
    [[ -z $missing ]] || exit 128
}
err() { echo -e "${color:+\e[31m}[!] $*\e[0m"; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*\e[0m"; }
info() { echo -e "${color:+\e[37m}[*] $*\e[0m"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || usage 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*\e[0m"; }
warn() { echo -e "${color:+\e[33m}[-] $*\e[0m"; }
### Helpers end

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS]

Makes netstat output a little more readable.

Options:
    -h, --help    Display this help message
    --no-color    Disable colorized output
    -s, --sudo    Run as root

EOF
    exit "$1"
}

declare -a args deps
unset help sudo
color="true"
deps+=("column")
deps+=("grep")
deps+=("netstat")

# Check for missing dependencies
check_deps

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-h"|"--help") help="true" ;;
        "--no-color") unset color ;;
        "-s"|"--sudo") sudo="sudo" ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Check for valid params
[[ -z $help ]] || usage 0
[[ $# -eq 0 ]] || usage 1

netstat="netstat -anptu"
case "$(uname -s)" in
    "Darwin") netstat="netstat -an" ;;
esac

while read -r line; do
    case "$line" in
        *"Active Internet connections"*) continue ;;
        *"Active Multipath Internet connections"*) break ;;
        *"Local Address"*)
            echo -n "$line" | sed -r -e "s/ Address/Address/g" \
                -e "s#/Program name.*##g" -e "s/ +\$//g" \
                -e "s/ +//g"
            case "$(uname -s)" in
                "Darwin") echo ;;
                *) echo "UserCommandLine" ;;
            esac
            continue
            ;;
    esac

    echo -n "$line" | sed -r -e "s#[0-9]+/.+##g" \
        -e "s/ +(\-)?//g"
    case "$line" in
        "udp"*"ESTABLISHED"*) ;;
        "udp"*) echo -n "UNCONN" ;;
    esac

    case "$(uname -s)" in
        "Darwin") echo; continue ;;
    esac

    pid="$(
        echo "$line" | grep -Eos "[0-9]+/.*" | cut -d "/" -f 1
    )"
    echo -n "${pid:--}"

    [[ -z $pid ]] && echo && continue

    username="$(ps -o user= --pid "$pid")"
    cmd="$(ps -o cmd= --pid "$pid")"
    echo "$username$cmd"
done < <($sudo $netstat 2>/dev/null) | column -s "" -t
