#!/usr/bin/env bash
# A wrapper script for nmap that organizes scan output.
# by Miles Whittaker <mjwhitta@gmail.com>
#
# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2018 Miles Whittaker
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

### Helpers begin
check_deps() {
    local missing
    for d in "${deps[@]}"; do
        if [[ -z $(command -v "$d") ]]; then
            # Force absolute path
            if [[ ! -f "/$d" ]]; then
                err "$d was not found"
                missing="true"
            fi
        fi
    done; unset d
    [[ -z $missing ]] || exit 128
}
err() { echo -e "${color:+\e[31m}[!] $*\e[0m"; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*\e[0m"; }
info() { echo -e "${color:+\e[37m}[*] $*\e[0m"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || usage 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*\e[0m"; }
warn() { echo -e "${color:+\e[33m}[-] $*\e[0m"; }
### Helpers end

scan_host() {
    host="$1"

    info "Scanning $host"

    # Probably should use grep or something here
    case "$host" in
        *[^0-9.]*) dir="${host/.*/}" ;;
        *) dir="$host" ;;
    esac

    local -a cmd=(
        "nmap"
        "$ipv6"
        "$os"
        "$iface"
        "$timeout"
        "-oA $output/$dir/$prot"
        "$ports"
        "$force"
        "$technique"
        "$services"
        "$udp"
        "$host"
    )

    mkdir -p $output/$dir
    if [[ -f $output/$dir/$prot.nmap ]] && [[ -z $force ]]; then
        warn "Already done, skipping"
    else
        good "${cmd[@]}" | sed -r "s/ +/ /g"
        ${cmd[@]}
    fi
    echo
}

scan_hosts() {
    info "Reading hosts from $1..."
    while read -r host; do
        scan_host ${host%% *}
    done < <(awk '!/^ *#/ {print $1}' $1)
}

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS] [host1]... [hostN]

Organizes your nmap scans

Options:
    -6                      Enable IPv6 scanning
    -f, --force             Force scan
    -h, --help              Display this help message
    --hosts=FILE            Use hosts from file (split on whitespace
                            and use first token from each line)
    -i, --iface=IFACE       Use the specified interface for scanning
    --nocolor               Disable colorized output
    -o, --os                Enable OS detection
    --output=DIR            Output scans to specified directory
                            (default: $output)
    -p, --ports=PORTS       Only scan specified ports (default: all
                            ports)
    -s, --services          Identity running services
    -t, --technique=TECH    Scan technique: syn, connect, ack, window,
                            maimon, null, fin, xmas
    --timeout=TIMEOUT       Give up on host after specified time (e.g.
                            15m)
    -n, --topn=NUM          Only scan the top N ports
    -u, --udp               UDP scan

EOF
    exit "$1"
}

declare -a args deps
unset force help iface ipv6 os services technique timeout udp
color="true"
deps+=("nmap")
output="nmap_scans"
prot="tcp"
ports="-p 1-65535"

# Check for missing dependencies
check_deps

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-6") ipv6="-6" ;;
        "-f"|"--force") force="-Pn" ;;
        "-h"|"--help") help="true" ;;
        "--hosts"*) hosts+=("$(long_opt "$@")") || shift ;;
        "-i"|"--iface"*) iface="-e $(long_opt "$@")" || shift ;;
        "-o"|"--os") os="-A" ;;
        "--output"*) output="$(long_opt "$@")" || shift ;;
        "-p"|"--ports"*) ports="-p $(long_opt "$@")" || shift ;;
        "-s"|"--services") services="-sV" ;;
        "-t"|"--technique"*)
            arg="$(long_opt "$@")" || shift
            case "$arg" in
                "syn") technique="-sS" ;;
                "connect") technique="-sT" ;;
                "ack") technique="-sA" ;;
                "window") technique="-sW" ;;
                "maimon") technique="-sM" ;;
                "null") technique="-sN" ;;
                "fin") technique="-sF" ;;
                "xmas") technique="-sX" ;;
                *) usage 127 ;;
            esac
            ;;
        "--timeout"*)
            timeout="--host-timeout $(long_opt "$@")" || shift
            ;;
        "-n"|"--topn"*)
            ports="--top-ports $(long_opt "$@")" || shift
            ;;
        "-u"|"--udp") udp="-sU"; prot="udp" ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Check for valid params
[[ -z $help ]] || usage 0
[[ $# -eq 0 ]] || hosts+=($@)
[[ -z $ipv6 ]] || prot="${prot}6"
[[ ${#hosts[@]} -ne 0 ]] || usage 1

for arg in "${hosts[@]}"; do
    [[ ! -f $arg ]] || scan_hosts $arg
    [[ -f $arg ]] || scan_host $arg
done
