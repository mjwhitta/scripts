#!/usr/bin/env bash

### Helpers begin
check_deps() {
    local missing
    for d in "${deps[@]}"; do
        if [[ -z $(command -v "$d") ]]; then
            # Force absolute path
            if [[ ! -e "/$d" ]]; then
                err "$d was not found"
                missing="true"
            fi
        fi
    done; unset d
    [[ -z $missing ]] || exit 128
}
err() { echo -e "${color:+\e[31m}[!] $*\e[0m"; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*\e[0m"; }
info() { echo -e "${color:+\e[37m}[*] $*\e[0m"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || return 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || return 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*\e[0m"; }
warn() { echo -e "${color:+\e[33m}[-] $*\e[0m"; }
### Helpers end

link() {
    info "Linking directories and files..."
    for entry in "${files[@]}"; do
        from="$here/${entry/:*/}"
        to="$(eval echo "${entry/*:/}")"

        if [[ ! -e $from ]]; then
            warn "$from does not exist"
            continue
        fi

        if [[ -L $to ]]; then
            already_from="$(ls -hl $to | awk '{print $NF}')"
            [[ $already_from != $from ]] || continue
            warn "Removing symlink $to"
            rm $to
        elif [[ -e $to ]] && [[ -z $force ]]; then
            warn "Moving $to to $to.$backup"
            mv $to $to.$backup
        elif [[ -d $to ]]; then
            warn "Removing directory $to"
            rm -rf $to
        elif [[ -f $to ]]; then
            warn "Removing file $to"
            rm -f $to
        else
            # info "Ensuring $(dirname $to) exists"
            mkdir -p $(dirname $to)
        fi

        good "Symlinking $from to $to"
        ln -s $from $to
    done; unset entry
    info "Successfully linked scripts"
}

link_status() {
    for entry in "${files[@]}"; do
        from="$here/${entry/:*/}"
        to="$(eval echo "${entry/*:/}")"

        if [[ ! -e $from ]]; then
            warn "$from does not exist"
            continue
        fi

        if [[ -L $to ]]; then
            already_from="$(ls -hl $to | awk '{print $NF}')"
            if [[ $already_from == $from ]]; then
                good "$to is linked"
            else
                warn "$to is not linked"
            fi
        else
            warn "$to is not linked"
        fi
    done; unset entry
}

unlink() {
    info "Unlinking directories and files..."
    for entry in "${files[@]}"; do
        from="$here/${entry/:*/}"
        to="$(eval echo "${entry/*:/}")"

        if [[ -L $to ]]; then
            already_from="$(ls -hl $to | awk '{print $NF}')"
            if [[ $already_from == $from ]]; then
                good "Removing symlink for $to"
                rm $to
            else
                err "Did not unlink $to as it was not linked"
            fi
        fi

        if [[ ! -e $to ]] && [[ -e $to.$backup ]]; then
            warn "Restoring $to.$backup to $to"
            mv $to.$backup $to
        elif [[ -e $to ]] && [[ ! -L $to ]]; then
            err "Could not unlink $to as it was not a symlink"
        fi

        if [[ -e $to.$backup ]]; then
            err "Did not restore backup of $to"
        fi
    done; unset entry
    info "Successfully unlinked scripts"
}

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS] <action>

DESCRIPTION
    Install scripts from this repo.

OPTIONS
    -f, --force    Do not make backups
    -h, --help     Display this help message
    --no-color     Disable colorized output

ACTIONS
    link      Back up existing scripts and symlink new scripts
    status    Show what's linked and what isn't
    unlink    Remove symlinks and restore old scripts

EOF
    exit $1
}

declare -a args
unset force help
backup="scripts.bak"
color="true"
here="$(pwd)"

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift; args+=("$@"); break ;;
        "-f"|"--force") force="true" ;;
        "-h"|"--help") help="true" ;;
        "--no-color") unset color ;;
        *) args+=("$1") ;;
    esac
    case "$?" in
        0) ;;
        1) shift ;;
        *) usage $? ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Help info
[[ -z $help ]] || usage 0

# Check for missing dependencies
declare -a deps
deps+=("grep")
deps+=("ln")
check_deps

# Check for valid params
[[ $# -eq 1 ]] || usage 1

declare -a files
files=($(grep -Ev "^(\s*#|$)" files.default))
[[ ! -f files ]] || files=($(grep -Ev "^(\s*#|$)" files))

case "$1" in
    "link") link ;;
    "status") link_status ;;
    "unlink") unlink ;;
    *) usage 2 ;;
esac
