#!/usr/bin/env bash

err() { echo -e "\e[31m[!] $@\e[0m"; }

info() { echo -e "\e[32m[+] $@\e[0m"; }

link() {
    info "Linking directories and files..."
    for entry in "${files[@]}"; do
        from="$here/${entry/:*/}"
        to="$(eval echo "${entry/*:/}")"

        if [[ ! -e $from ]]; then
            warn "$from does not exist"
            continue
        fi

        if [[ -L $to ]]; then
            already_from="$(ls -hl $to | awk '{print $NF}')"
            [[ $already_from != $from ]] || continue
            info "Removing symlink $to"
            rm $to
        elif [[ -e $to ]] && [[ -z $force ]]; then
            info "Moving $to to $to.$backup"
            mv $to $to.$backup
        elif [[ -d $to ]]; then
            info "Removing directory $to"
            rm -rf $to
        elif [[ -f $to ]]; then
            info "Removing file $to"
            rm -f $to
        else
            # info "Ensuring $(dirname $to) exists"
            mkdir -p $(dirname $to)
        fi

        info "Symlinking $from to $to"
        ln -s $from $to
    done; unset entry
    info "Successfully linked scripts"
}

link_status() {
    for entry in "${files[@]}"; do
        from="$here/${entry/:*/}"
        to="$(eval echo "${entry/*:/}")"

        if [[ ! -e $from ]]; then
            warn "$from does not exist"
            continue
        fi

        if [[ -L $to ]]; then
            already_from="$(ls -hl $to | awk '{print $NF}')"
            if [[ $already_from == $from ]]; then
                info "$to is linked"
            else
                warn "$to is not linked"
            fi
        else
            warn "$to is not linked"
        fi
    done; unset entry
}

unlink() {
    info "Unlinking directories and files..."
    for entry in "${files[@]}"; do
        from="$here/${entry/:*/}"
        to="$(eval echo "${entry/*:/}")"

        if [[ -L $to ]]; then
            already_from="$(ls -hl $to | awk '{print $NF}')"
            if [[ $already_from == $from ]]; then
                info "Removing symlink for $to"
                rm $to
            else
                err "Did not unlink $to as it was not linked"
            fi
        fi

        if [[ ! -e $to ]] && [[ -e $to.$backup ]]; then
            info "Restoring $to.$backup to $to"
            mv $to.$backup $to
        elif [[ -e $to ]] && [[ ! -L $to ]]; then
            err "Could not unlink $to as it was not a symlink"
        fi

        if [[ -e $to.$backup ]]; then
            err "Did not restore backup of $to"
        fi
    done; unset entry
    info "Successfully unlinked scripts"
}

usage() {
    echo "Usage: ${0/*\//} [OPTIONS] <action>"
    echo "Options:"
    echo "    -f, --force    Do not make backups"
    echo "    -h, --help     Display this help message"
    echo
    echo "Actions:"
    echo "    link"
    echo "        Back up existing scripts and symlink new scripts"
    echo "    status"
    echo "        Show what's linked and what isn't"
    echo "    unlink"
    echo "        Remove symlinks and restore old scripts"
    echo
    exit $1
}

warn() { echo -e "\e[33m[-] $@\e[0m"; }

declare -a args
unset force
backup="scripts.bak"
here="$(pwd)"

while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-f"|"--force") force="true" ;;
        "-h"|"--help") usage 0 ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ -z ${args[@]} ]] || set -- "${args[@]}"

[[ $# -eq 1 ]] || usage 1

declare -a files
files=($(grep -Ev "^(\s*#|$)" files.default))
[[ ! -f files ]] || files=($(grep -Ev "^(\s*#|$)" files))

case "$1" in
    "link") link ;;
    "status") link_status ;;
    "unlink") unlink ;;
    *) usage 2 ;;
esac
